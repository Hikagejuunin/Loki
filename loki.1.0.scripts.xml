<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Loki 1.0 scripts</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Lokisettings</name>
				<packageName></packageName>
				<script>-------------------------------------------------------------------------------------------------------
--SYSTEM VARS (change these)
-------------------------------------------------------------------------------------------------------
mySelf = "Hikagejuunin"          -- make sure to capitalize your name
myPronoun = "his"                -- his/her/faes (for illusion purposes)
myCity = "hashan"                -- your city ("hashan", "ashtan", "targossas", "cyrene", "mhaldor" or "none")
myPack = "backpack"              -- your pack      
myArmor = "scalemail"            -- your armor
myWhip = "whip"                  -- your whip/lash
myDirk = "dirk"                  -- your dirk
myShield = "shield"              -- your shield
myBow = "bow"                    -- you bow
mySword = "longsword"            -- for behead/decapitate 
mySnake = "viper"
mySnakeName = "a green eyelash viper"
myCitySnake = "viper"
mySnap = 0.65                    -- (suggested: 0.45-0.85, will need to play with it to adjust for your dstab speed)
myDefTarget = "Hikagejuunin"     -- default target, you can pick another prick if ya like

-------------------------------------------------------------------------------------------------------
--SYSTEM DEFAULTS (do not change unless you want different defaults)
-------------------------------------------------------------------------------------------------------
mesmer = mesmer or {}            -- don't edit!
myColour = "silver"              -- selects default arrow colour to use
hypnoout = "sugg imp"            -- default hypnosis chain 
mesmer.sealTime = 1              -- default seal time
auto_snap = true                 -- toggle: ('as'): snap based on: (target's tree tattoo downtime and asthma status) 
auto_flay = true                 -- toggle: ('af'): flay if target has rebounding or shield
EchoToParty = false              -- toggle: ('pa'): announce affs to party
PartyCalls = false               -- toggle: ('pc'): target party calls
PartyLeader = false              -- toggle: ('pl'): make target calls as leader
no_tree = false                  -- toggle: ('vt nt'): snaps don't consider tree downtime
slainreset = false               -- resets AK aff tracking on target slain (off by default)

-------------------------------------------------------------------------------------------------------
--SYSTEM CORE (do not change!!!)
-------------------------------------------------------------------------------------------------------
vstack = "none"
tar_class = "none"
no_hyp = nil                     -- toggle: ('nh'): turn on or off hypnosis
hyp_delay = nil</script>
				<eventHandlerList>
					<string>sysLoadEvent</string>
				</eventHandlerList>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Osettings! --(Loki edit)</name>
				<packageName></packageName>
				<script>--osettings
ak = ak or {}

--if ak.mycustomoffense then return end           --DELETE THIS SHIT OUT OF YOUR PERSONAL VARS

ak.MovementKeys = ak.MovementKeys or {"Tecton","Maya"}--add yourself here to allow num key movement
ak.disableAllEchos = false --Set to Disable Relays and Prompt
ak.nodisplay = true  --Set to True to Turn off Display!  Always Retarget something to refresh.
ak.expertdiagnose = false --Set to False to Disable ED
ak.obacktrack = true  --Set to False to Disable Backtracking
ak.oprotrack = true --If you do unknown affs, do not enable this
ak.owhy = true --If you do not have 100% accurate affliction information(group fighting/Illusion), do not enable this
ak.highlighttarget = true --Self Explanatory
------------------------------------------------------------------------------------------------------------------

ak.spear = "a Stormspear"                          --This is for Spear Venom Tracking Purposes

ak.odirk = "Thoth's fang"                          --This is for Dstab Venom Tracking Purposes
--ak.odirk = "a sharpened buckawn's spine"
--ak.odirk = "an assassin's dirk"
-------------------------------------------------------------------------------------------------------------------

--Adding your weapons to limb counter:
ak.limbs = ak.limbs or {} 
ak.limbs.myweapons = ak.limbs.myweapons or {

		--Proximity Values.  Finds the closest to our target health and uses that.
		--These are percentage values, so a single stab vs 4000 health target will do 9% damage.
   ["a Soulpiercer"] = {
      [2563] = 7,
      [4000] = 9,
      [5000] = 10,
      [6000] = 11,
   },
   ["a Logosian longsword"] = {
      [2563] = 7,
      [4000] = 9,
      [5000] = 10,
      [6000] = 11,
   },
}

--Adding your custom limb formula:

ak.limbs.myformulas = {} 

--Must retain formatting as a function and us ak's called weapon in function name(example is hfp).  
--Limbs break at 100, ergo these should return a percentage. Dragon rend would return 25

function ak.limbs.myformulas.hfp(who, attacker, weapon, limb, augment, check)
	local whomaxhealth = ak.limbs.FindTargetHealth(who)
  local damage = 0
	damage = roundUp(.0897*whomaxhealth+227*1.35,0)
	damage = (100 * damage/whomaxhealth) --Converting to a percentage
	return damage  
end

---------------------------------------------------------------------------------------------------------------------

--OBVIOUSLY YOU DON"T WANT TO LOOK LIKE YOU ARE USING MY SYSTEM!  PEOPLE MIGHT LOOK DOWN ON YOU!!

function EchoForAddedAff(incoming)
   cecho("&lt;white&gt;\nProcessed Affliction(&lt;yellow&gt;" ..incoming.. "&lt;white&gt;)")  --Change this line for added afflictions
   if (string.lower(incoming) == "paralysis" or string.lower(incoming) == "impatience") then
   elseif (EchoToParty and not svo.inslowcuringmode()) then
     send("pt " .. target .. " hit with " .. string.lower(incoming)) 
   end
   if string.lower(incoming) == "impatience" then
   end
end

function EchoForLostAff(incoming)
   cecho("&lt;white&gt;\nLost Affliction(&lt;yellow&gt;" ..incoming.. "&lt;white&gt;)\n")  --Change this line for removed afflictions
end  
function EchoForPossibleCures(incoming)
   cecho("&lt;white&gt;\nProcessed Cures(&lt;yellow&gt;" ..incoming.. "&lt;white&gt;)")  --Change this line for removed afflictions
end 
function EchoForMajorAff(incoming,color,color2,color3)
	local color = color or "red"
	local color2 = color2 or "cyan"
	local color3 = color3 or "green"
	cecho("\n&lt;purple&gt; --------------------------------------------------------------")
	cecho("\n&lt;"..color.."&gt; --------------------&lt;"..color2.."&gt;GOT&lt;"..color3.."&gt; "..incoming.."&lt;"..color.."&gt;!!--------------------------")
	cecho("\n&lt;"..color.."&gt; --------------------&lt;"..color2.."&gt;GOT&lt;"..color3.."&gt; "..incoming.."&lt;"..color.."&gt;!!--------------------------")
	cecho("\n&lt;"..color.."&gt; --------------------&lt;"..color2.."&gt;GOT&lt;"..color3.."&gt; "..incoming.."&lt;"..color.."&gt;!!--------------------------")
	cecho("\n&lt;"..color.."&gt; --------------------&lt;"..color2.."&gt;GOT&lt;"..color3.."&gt; "..incoming.."&lt;"..color.."&gt;!!--------------------------")
	cecho("\n&lt;"..color.."&gt; --------------------&lt;"..color2.."&gt;GOT&lt;"..color3.."&gt; "..incoming.."&lt;"..color.."&gt;!!--------------------------")
	cecho("\n&lt;purple&gt; --------------------------------------------------------------")
end


----------------------------------------------------------------------------------------------------------------------

--USE THIS TO SET YOUR SERVERSIDE ALIASES FOR YOU, DEPENDING ON THEIR AFFS
--THEN SIMPLY CALL YOUR SERVERSIDE ALIAS


function ak.mycustomoffense()
   if ak.stack == "example" then --make stack variable default below
      --venom_select()
      --attack_select()
      --additional_attack_decision()
      --set_server_side_aliases_using_info_from_above()
	 elseif ak.stack == "dragon" then
			ak.dragon.default.main() 
   end
end

----------------------------------------------------------------------------------------------------------------------

--*

--Svo Prompt--

--add ^y@ml_oprompt to your custom prompt

--*


--WYS Prompt--

--type wshow display

--add @owysprompt into your prompt



-----------------------------------------------------------------------------------------------------------------------


</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Lockstack</name>
				<packageName></packageName>
				<script>ak = ak or {}
ak.serpent = ak.serpent or {}
ak.serpent.Lockstack = ak.serpent.Lockstack or {}

function ak.serpent.Lockstack.main()

ak.scoreup()

local d = ak.defs
local s = affstrack.score
local stacking
local stab
local stabs = stabs or {}

if (affstrack.score["camus"] == nil or affstrack.score["camus"] &lt; 100) then
  affstrack.score["camus"] = 50
end

--[[ VENOM TABLES ]]

local vlock = {
  "asthma 50",
  "slickness 50",
  "anorexia 100",
  "asthma 75",
  "slickness 100",
  "paralysis 100",
  "asthma 100",
  "voyria 100",
  "weariness 100",
  "recklessness 100",
  "stupidity 100",
  "selarnia 100",
  "prone 100",
  "leftarm 100",
  "rightarm 100",
  "haemophilia 100",
  "scytherus 100",
  "sensitivity 100",
  "darkshade 100",
  "leftleg 100",
  "rightleg 100",
  "dizziness 100",
  "nausea 100",
  "addiction 100",
  "clumsiness 100",
  "frozen 100",
  "sleep 100",
  "camus 100",
}

local mainstack = {
  "paralysis 55",
  "asthma 100",
  "slickness 50",
  "paralysis 100",
  "slickness 100",
  "weariness 50",
  "clumsiness 50",
  "darkshade 100",
  "nausea 50",
  "addiction 50",
  "weariness 100",
  "clumsiness 100",
  "nausea 100",
  "addiction 100",
  "sensitivity 100",
  "stupidity 100",
  "dizziness 100", 
  "prone 100",
  "leftarm 100",
  "rightarm 100", 
  "leftleg 100",
  "rightleg 100",
  "recklessness 100",
  "selarnia 100",
  "voyria 100",
}

local venomConvert = {
   ["paralysis"] = "curare",
   ["clumsiness"] = "xentio",
   ["slickness"] = "gecko",
   ["darkshade"] = "darkshade",
   ["voyria"] = "voyria",
   ["asthma"] = "kalmia",
   ["anorexia"] = "slike",
   ["weariness"] = "vernalius",
   ["recklessness"] = "eurypteria",
   ["stupidity"] = "aconite",
   ["dizziness"] = "larkspur",
   ["sleep"] = "delphinium",
   ["nausea"] = "euphorbia",
   ["addiction"] = "vardrax",
   ["selarnia"] = "selarnia",
   ["sensitivity"] = "prefarar",
   ["prone"] = "delphinium",
   ["leftarm"] = "epteth",
   ["rightarm"] = "epteth",
   ["leftleg"] = "epseth",
   ["rightleg"] = "epseth",
   ["scytherus"] = "scytherus",
   ["camus"] = "camus",
   ["frozen"] = "nechamandra",
   ["haemophilia"] = "notechis",
}

local vlockstack = table.deepcopy(vlock)
local mainlockstack = table.deepcopy(mainstack)

--[[ MESMER HYPNOSIS ]]
function mesmer_push()
  if (no_hyp == true or hyp_delay == true) then
  elseif mesmer.status == "none" then
    mesmer.reset()
    expandAlias(hypnoout)
    mesmer.suggest()
  elseif mesmer.status == "in progress" then
  elseif mesmer.status == "hypnotised" then
    mesmer.suggest()
  elseif mesmer.status == "snapped" then
    mesmer.reset()
    expandAlias(hypnoout)
    mesmer.suggest()
  elseif mesmer.status == "sealed" then
  end
end

--[[ AUTOSNAPPER ]]
local function snap()
  send("snap "..target)
end

function autosnapper()
  if auto_snap then
      if (treeTimer ~= nil and affstrack.score.asthma == 100 and mesmer.status == "sealed" and remainingTime(treeTimer)&gt;4.5) then snap()
      elseif (treeTimer ~= nil and affstrack.score.asthma &gt;= 50 and affstrack.kelpscore &gt;= 2 and mesmer.status == "sealed" and remainingTime(treeTimer)&gt;4.5) then 
        snap()
      elseif (affstrack.score.asthma == 100 and mesmer.status == "sealed" and no_tree) then 
        snap()
      elseif (affstrack.score.asthma &gt;= 50 and affstrack.kelpscore &gt;= 2 and mesmer.status == "sealed" and no_tree) then 
        snap()
      elseif (affstrack.score.asthma == 100 and affstrack.score.slickness == 100 and affstrack.score.paralysis == 100 and mesmer.status == "sealed") then 
        snap()
      elseif (affstrack.score.asthma == 100 and affstrack.kelpscore &gt;= 2 and (affstrack.kelpscore + affstrack.ginsengscore) &gt;= 3 and affstrack.score.paralysis == 100 and mesmer.status == "sealed") then
        snap()
      end
   end
end

--REQUEUE STAB
local function requeue_stab() 
  ak.scoreup()
  expandAlias("ds")
end

--[[ VENOM TABLE SELECTION ]]

-- vlockstack: venom selection post-snap or stuck impatience
if (affstrack.score.impatience&gt;0 or hypstatus == true) then
  stacking = vlockstack
  if (tar_class == "blademaster" or tar_class == "earthelemental" or tar_class == "infernal" or tar_class == "knight" or tar_class == "monk" or tar_class == "sentinel" or tar_class == "serpent" or tar_class == "unnamable" or tar_class == "waterelemental") then 
    table.insert(vlockstack, 8 ,"weariness 100")
    table.insert(vlockstack, 9 ,"prone 100")
  elseif (tar_class == "airelemental" or tar_class == "apostate" or tar_class == "bard" or tar_class == "jester" or tar_class == "occultist" or tar_class == "pariah" or tar_class == "priest" or tar_class == "sylvan") then
    table.insert(vlockstack, 8 ,"voyria 100")
    table.insert(vlockstack, 9 ,"prone 100") 
  elseif (tar_class == "shaman") then
    table.insert(vlockstack, 8 ,"selarnia 100")
    table.insert(vlockstack, 9 ,"prone 100")
  elseif (tar_class == "alchemist") then
    table.insert(vlockstack, 8 ,"stupidity 100")
    table.insert(vlockstack, 9 ,"prone 100")
  elseif (tar_class == "druid" or tar_class == "paladin" or tar_class == "runewarden") then
    table.insert(vlockstack, 8 ,"weariness 100")
    table.insert(vlockstack, 9 ,"voyria 100")
  elseif (tar_class == "dragon") then
    table.insert(vlockstack, 8 ,"weariness 100")
    table.insert(vlockstack, 9 ,"recklessness 100")
    table.insert(vlockstack, 10 ,"prone 100")
  elseif (tar_class == "depthswalker") then
    table.insert(vlockstack, 8 ,"recklessness 100")
    table.insert(vlockstack, 9 ,"prone 100") 
  elseif (tar_class == "fireelemental") then
    table.insert(vlockstack, 8 ,"prone 100")
  elseif (tar_class == "magi") then 
    table.insert(vlockstack, 8 ,"haemophilia 100")
    table.insert(vlockstack, 9 ,"prone 100")
  elseif (tar_class == "psion") then 
    table.insert(vlockstack, 8 ,"prone 100")
  else
    stacking = vlockstack
  end
  
-- mainlockstack: venom selection pre-snap
else
  stacking = mainlockstack 
  if vstack == "wea" then
    table.insert(mainlockstack , 2 ,"weariness 50")
  elseif vstack == "clu" then
    table.insert(mainlockstack , 2 ,"clumsiness 50")
  elseif vstack == "dark" then
    table.insert(mainlockstack , 2 ,"darkshade 50")
  elseif vstack == "kelp" then
    table.insert(mainlockstack , 2 ,"weariness 75")
    table.insert(mainlockstack , 3 ,"clumsiness 75")
    table.insert(mainlockstack , 4 ,"sensitivity 75")
    table.insert(mainlockstack , 5 ,"weariness 100")
    table.insert(mainlockstack , 6 ,"clumsiness 100")
    table.insert(mainlockstack , 7 ,"sensitivity 100")
  end
end

--PREFIX (actions taken before dstab)
function prefix()
  local pref = {"stand","order "..mySnake.." attack "..target,"purge"}
  pf = table.concat(pref, "/")
  return pf
  end

--PRE-DSTAB FUNCTIONS (functions run before dstab)
  mesmer_push()
  
--LOCKSTACK CORE

  for _, affliction in ipairs(stacking) do
      local aff, prob = affliction:match("(%a+) (%d+)")
      local prob = tonumber(prob)
      if table.contains(stabs, aff) then
      elseif affstrack.score[aff] &lt; prob then
        table.insert(stabs, aff)
      end
  end

  
  if (stabs[1] == "prone" or stabs[1] == "sleep")  then
    stab = string.format("%s %s", "delphinium", "delphinium")
  elseif (stabs[1] == "scytherus" or stabs[1] == "camus" or stabs[1] == "frozen" or stabs[1] == "haemophilia")  then
    stab = string.format("%s", venomConvert[stabs[1]])
  elseif (stabs[2] == "scytherus" or stabs[2] == "camus" or stabs[2] == "frozen" or stabs[2] == "haemophilia")  then
    local remove_bites = table.deepcopy(stabs)
    if table.contains(remove_bites, "scytherus") then table.remove(remove_bites, table.index_of(remove_bites, "scytherus")) end
    if table.contains(remove_bites, "camus") then table.remove(remove_bites, table.index_of(remove_bites, "camus")) end
    if table.contains(remove_bites, "frozen") then table.remove(remove_bites, table.index_of(remove_bites, "frozen")) end
    if table.contains(remove_bites, "haemophilia") then table.remove(remove_bites, table.index_of(remove_bites, "haemophilia")) end
    
    if remove_bites[1] == "paralysis" then
      stab = string.format("%s %s", venomConvert[remove_bites[2]], venomConvert[remove_bites[1]])
    else
      stab = string.format("%s %s", venomConvert[remove_bites[1]], venomConvert[remove_bites[2]])
    end
  elseif stabs[1] == "paralysis" then
    stab = string.format("%s %s", venomConvert[stabs[2]], venomConvert[stabs[1]])
  else
    stab = string.format("%s %s", venomConvert[stabs[1]], venomConvert[stabs[2]])
  end

  if (stabs[1] == "scytherus" or stabs[1] == "camus" or stabs[1] == "frozen" or stabs[1] == "haemophilia")  then
    if (ak.defs.sileris and affstrack.score.slickness &lt; 100) then
      ak.setalias("oattack", prefix().."/wield "..myWhip.." "..myShield.."/wipe "..myWhip.."/flay "..target.." rebounding gecko")
      ak.defs.sileris = false
    else
      ak.setalias("oattack", prefix().."/bite "..target.." "..stab.."/purge") 
    end
  elseif (ak.defs.shield and auto_flay) then
    ak.setalias("oattack", prefix().."/wield "..myWhip.." "..myShield.."/wipe "..myWhip.."/flay "..target.." shield "..venomConvert[stabs[1]])
  elseif (ak.defs.rebounding and auto_flay) then
    ak.setalias("oattack", prefix().."/wield "..myWhip.." "..myShield.."/wipe "..myWhip.."/flay "..target.." rebounding "..venomConvert[stabs[1]])
  elseif (affstrack.score.impatience&gt;0 or hypstatus == true) then
    stacking = vlockstack
    ak.setalias("oattack", prefix().."/wield "..myDirk.." "..myShield.."/wipe dirk/dstab "..target.." "..stab)
  else
    ak.setalias("oattack", prefix().."/wield "..myDirk.." "..myShield.."/wipe dirk/dstab "..target.." "..stab)
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Bitestack</name>
				<packageName></packageName>
				<script>ak = ak or {}
ak.serpent = ak.serpent or {}
ak.serpent.Bitestack = ak.serpent.Bitestack or {}

function ak.serpent.Bitestack.main()

ak.scoreup()

local d = ak.defs
local s = affstrack.score
local stacking
local bite
local bites = bites or {}

affstrack.score["camus"] = 50

local vlock = {
  "paralysis 100",
  "asthma 100",
  "slickness 100",
  "anorexia 100",
  "voyria 100",
  "scytherus 100",
  "camus 100",
}

local venomConvert = {
   ["paralysis"] = "curare",
   ["clumsiness"] = "xentio",
   ["slickness"] = "gecko",
   ["darkshade"] = "darkshade",
   ["voyria"] = "voyria",
   ["asthma"] = "kalmia",
   ["anorexia"] = "slike",
   ["weariness"] = "vernalius",
   ["recklessness"] = "eurypteria",
   ["stupidity"] = "aconite",
   ["dizziness"] = "larkspur",
   ["sleep"] = "delphinium",
   ["nausea"] = "euphorbia",
   ["addiction"] = "vardrax",
   ["selarnia"] = "selarnia",
   ["sensitivity"] = "prefarar",
   ["prone"] = "delphinium",
   ["leftarm"] = "epteth",
   ["rightarm"] = "epteth",
   ["leftleg"] = "epseth",
   ["rightleg"] = "epseth",
   ["scytherus"] = "scytherus",
   ["camus"] = "camus",
   ["frozen"] = "nechamandra",
   ["haemophilia"] = "notechis",
}

local bitestack = table.deepcopy(vlock)
stacking = bitestack


--VENOM TABLE SELECTION
if (tar_class == "blademaster" or tar_class == "earthelemental" or tar_class == "infernal" or tar_class == "knight" or tar_class == "monk" or tar_class == "sentinel" or tar_class == "serpent" or tar_class == "unnamable" or tar_class == "waterelemental") then 
  table.insert(bitestack, 5 ,"weariness 100")
elseif (tar_class == "airelemental" or tar_class == "apostate" or tar_class == "bard" or tar_class == "jester" or tar_class == "occultist" or tar_class == "pariah" or tar_class == "priest" or tar_class == "sylvan") then
  table.insert(bitestack, 5 ,"voyria 100") 
elseif (tar_class == "shaman") then
  table.insert(bitestack, 5 ,"selarnia 100")
elseif (tar_class == "alchemist") then
  table.insert(bitestack, 5 ,"stupidity 100")
elseif (tar_class == "druid" or tar_class == "paladin" or tar_class == "runewarden") then
  table.insert(bitestack, 5 ,"weariness 100")
  table.insert(bitestack, 6 ,"voyria 100")
elseif (tar_class == "dragon") then
  table.insert(bitestack, 5 ,"weariness 100")
  table.insert(bitestack, 6 ,"recklessness 100")
elseif (tar_class == "depthswalker") then
  table.insert(bitestack, 5 ,"recklessness 100")
elseif (tar_class == "fireelemental") then
  table.insert(bitestack, 5 ,"prone 100")
elseif (tar_class == "magi") then 
  table.insert(bitestack, 5 ,"haemophilia 100")
elseif (tar_class == "psion") then 
  table.insert(bitestack, 5 ,"leftarm 100")
  table.insert(bitestack, 6 ,"rightarm 100")
else
  stacking = bitestack
end

--PREFIX
function prefix()
  local pref = {"stand","purge"}
  pf = table.concat(pref, "/")
  return pf
end

--BITESTACK CORE

for _, affliction in ipairs(stacking) do
    local aff, prob = affliction:match("(%a+) (%d+)")
    local prob = tonumber(prob)
    if table.contains(bites, aff) then
    elseif affstrack.score[aff] &lt; prob then
      table.insert(bites, aff)
    end
end

mesmer_push()

bite = string.format("%s", venomConvert[bites[1]])
if svo.inslowcuringmode() then
  if (ak.defs.sileris and affstrack.score.slickness &lt; 100) then
    ak.setalias("battack", "flay "..target.." rebounding gecko","queue add eqbal qbite")
    ak.defs.sileris = false
  else
    ak.setalias("battack", "bite "..target.." "..bite,"queue add eqbal qbite")
  end
elseif (ak.defs.sileris and affstrack.score.slickness &lt; 100) then
  ak.setalias("battack", prefix().."/wield "..myWhip.." "..myShield.."/purge/flay "..target.." rebounding gecko/purge","queue add eqbal qbite")
  ak.defs.sileris = false
else
  ak.setalias("battack", prefix().."/bite "..target.." "..bite.."/purge","queue add eqbal qbite")
end

end

</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Read Me</name>
				<packageName></packageName>
				<script>--[[

# Loki
Loki serpent combat system for Achaea

** note: includes AK aff tracker by Austere and a Mesmer by Isaiah


To install first import the "loki.1.0.scripts", "loki.1.0.aliases", "loki.1.0.triggers" files into Mudlet (https://www.mudlet.org/). 

I've included a read me in the scripts folder which I'll just dump here until I can give this more time.

Loki is a serpent offense system to handle your venom selection, hypnosis queueing, and other various aspects combat. 
I'd thank everyone who helped me get to where I am today. Shout out to Fen, Janella, Siv, Agramon, Arcturus, Balkin, Oblive, Essie, Sylvi and many many more.
I'd also like to thank the third party code I made use of for this release, primarily Mesmer and Austere's AK tracker

It's my hope this slimmed down basic serpent combat system can encourage more involvement for typically non-combatants.
I hope this start provides a framework to expand upon and create your own system.


GETTING STARTED:

First off make sure you edit the script "Lokisettings" with your own variables in the "--SYSTEM VARS" section. 
The system's functioning depends on you providing your updated variables (equipment, snaketype ...etc)
You can change most of the "--SYSTEM DEFAULTS" if you want, but the defaults are fine.

** You will also want to add a custom prompt if ya got svof, otherwise see how Austere's AK handles that for other curing systems:
*** Also I disabled the graphical AK stuff, if ya want it enable in Osettings! There you should also specify what dirk artefact you have, default is Thoth's

from Osettings!:
----------------------------------------------------------------------------------------------------------------------

--*

--Svo Prompt--

--add ^y@ml_oprompt to your custom prompt

--*


--WYS Prompt--

--type wshow display

--add @owysprompt into your prompt

-----------------------------------------------------------------------------------------------------------------------


--Hika original
vconfig customprompt ^1@health^pinkhp^r@(diffhealth)^gray(^2@%health^g%^gray)^c|^2@mana^bmp^2^gray^b@diffmana^gray(^2@%mana^g%^gray)^c|^gray(@%endurance%^g^yellowen^gray)^c|^gray(@%willpower%^g^magentawp^gray)^c|^2^gold^DarkOrange@eqbal@affs^W-^c| ^r@target @promptstring @gametargethp ^y@ml_oprompt

--Hika new
vconfig customprompt ^SlateGrayH:^1@health^r@(diffhealth)^SlateGray(^azure@%health%^SlateGray) ^SlateGrayM:^2@mana^b@(diffmana)^SlateGray(^azure@%mana%^SlateGray) ^DarkSlateGray(^G@%endurance^SlateGrayE ^G@%willpower^SlateGrayW^DarkSlateGray) ^2^gold^DarkOrange@eqbal @affs^W -^SlateGray ^red@target ^SlateGray(^w@gametargethp^SlateGray) ^y@ml_oprompt

--Hika new with \n
vconfig customprompt \n^SlateGrayH:^1@health^r@(diffhealth)^SlateGray(^azure@%health%^SlateGray) ^SlateGrayM:^2@mana^b@(diffmana)^SlateGray(^azure@%mana%^SlateGray) ^DarkSlateGray(^G@%endurance^SlateGrayE ^G@%willpower^SlateGrayW^DarkSlateGray) ^2^gold^DarkOrange@eqbal @affs^W -^SlateGray ^red@target ^SlateGray(^w@gametargethp^SlateGray) ^y@ml_oprompt


CORE COMMANDS:

ds<xx> - dstab alias             
  example: ds<ck> = dstab curare/kalmia
** "ds" without venom selections selects them automatically, you can manipulate these with "vt <selection>"
  example: "vt w" = add weariness to lockstack 

manual dstab venom selections:

a = "aconite" 
c = "curare"  
d = "delphinium" 
e = "eurypteria" 
f = "epteth" 
g = "gecko" 
i = "digitalis" 
k = "kalmia" 
l = "larkspur" 
m = "monkshood" 
n = "selarnia" 
o = "voyria" 
p = "prefarar" 
q = "epseth" 
r = "darkshade"
s = "slike"
u = "euphorbia"
v = "vernalius"
x = "xentio"
z = "vardrax"

bs<x> - bite alias
** bs with no venoms specified will automatically select venoms from bitestack
  
manual bite venoms:

a = "aconite",
b = "oculus",
c = "camus",
d = "delphinium",
e = "eurypteria",
f = "epteth",
g = "gecko",
i = "digitalis",
k = "kalmia",
l = "loki",
m = "nechamandra",      -- useful after lock to freeze/disrupt
n = "notechis",         -- magi class blocker
o = "voyria",
p = "prefarar",
q = "epseth",
r = "darkshade",
s = "scytherus",
u = "euphorbia",
v = "vernalius",
x = "xentio",
y = "oculus",           -- use against trueblind opponents/those you aren't able to hypnotize
z = "vardrax",

--CUSTOM PVP SETTINGS
"cs <class> = will set several offensive variables for a specific class
   example: "cs kni" = [imp] hypno; [wea] vstack; [wea] postlock
   example: "cs drg" = [imp add hyp rec con] hypno; [wea/dark] vstack; [wea] postlock; weaving on
"cs" without an option will resets to defaults

--VSTACK SELECTION
"vt w" - weariness 
"vt d" - darkshade
"vt c" - clumsiness
"vt k" - ast/weariness/clums/sensitivity
"vt b" - clears all above venom selections, can be anything that is not one of the options, just like vt none clears postlock prefs

--POST LOCK STACK
"vt drg" = dragon (weariness/recklessness)
"vt srp" = serpent (weariness)
"vt kni" = knight [monk, paladin, blademaster...etc] (weariness)
"vt alc" = alchemist (stupidity)
"vt dru" = druid (voyria, weariness)
"vt sha" = shaman (selarnia)
"vt syl" = sylvan (voyria)
"vt bar" = bard (voyria)
"vt par" = pariah (voyria)
"vt prt" = priest (voyria)
"vt rwn" = "runewarden" (voyria)
"vt pal" = paladin (voyria)
"vt apo" = apostate (voyria)
"vt occ" = occultist (voyria)
"vt dsw" = depthswalker (recklessness)
"vt aem" = airelemental (voyria)
"vt none" = resets postlock to default 

other aliases:
  
ps = pinshot
cl = conjure lightwall
ms = push mesmer hypnosis
tr = target reset
qh <option> = custom hypnosis
sn <direction> = snipe
sm = shoot meteor
pl = party leader (make target calls to party)
pc = listen to party aff calls
pa = announce affs to party
af = toggles autoflay
as = toggles autosnapper
nh = toggles hypnosis
sv = summon your snake

--OTHER SETTINGS
"vt nt" = toggles if autosnap will wait to snap when tree is down

]]

-------------------------------------------------------------------------------------------------------
--SYSTEM INFO
-------------------------------------------------------------------------------------------------------

--MESMER HYPNOSIS
--[[mesmer.ref.shortsRev =
  {
    impatience = "imp",   clumsiness = "clu",   claustrophobia = "cla",
    amnesia = "amn",      addiction = "add",    paranoia = "par",
    loneliness = "lon",   stuttering = "stt",   hallucinations = "hal",
    pacifism = "pac",     hypersomnia = "hpr",  dementia = "dem",
    deadening = "dea",    epilepsy = "epi",     agoraphobia = "ago",
    masochism = "mas",    recklessness = "rec", vertigo = "ver",
    lethargy = "let",     anorexia = "ano",     disrupt = "dis",
    confusion = "con",    stupidity = "stu",    generosity = "gen",
    hypochondria = "hyp",
  }]]
  

</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>AK Opponent Tracking</name>
				<packageName>AK Opponent Tracking</packageName>
				<script></script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>AK Opponent Tracking</name>
					<packageName></packageName>
					<script>--ak config

ak = ak or {}
ak.cure = ak.cure or {}
ak.errorallowance = ak.errorallowance or 34
ak.manapercent = ak.manapercent or 100
ak.healthpercent = ak.healthpercent or 100
ak.currentmana = ak.currentmana or 5000
ak.maxmana = ak.maxmana or 5000
ak.currenthealth = ak.currenthealth or 5000
ak.maxhealth = ak.maxhealth or 5000
ak.bleeding = ak.bleeding or 0
ak.eatsbetweenaffs = 0

ak.aliases = ak.aliases or {}
ak.aliases.lastsend = ak.aliases.lastsend or {}
ak.queue = ak.queue or {}
ak.queue.eqbal = ak.queue.eqbal or {}
ak.queue.sent = {}

ak.pervasion = ak.pervasion or {}
ak.pervasion.initialbleed = false
ak.duress = ak.duress or {}
ak.ignition = ak.ignition or {}
ak.serpent = ak.serpent or {}
ak.dragon = ak.dragon or {}
ak.firelord = ak.firelord or {}
ak.firelord.spark = ak.firelord.spark or 0
ak.priest = ak.priest or {}
ak.shaman = ak.shaman or {}
ak.knight = ak.knight or {}
ak.monk = ak.monk or {}
ak.jester = ak.jester or {}
ak.occie = ak.occie or {}
ak.alchemist = ak.alchemist or {}
ak.bard = ak.bard or {}
ak.magi = ak.magi or {}
ak.sentinel = ak.sentinel or {}
ak.depthswalker = ak.depthswalker or {}
ak.SnB = ak.SnB or {}
ak.dwc = ak.dwc or {}
ak.dwb = ak.dwb or {}
ak.bm = ak.bm or {}
ak.sylvan = ak.sylvan or {}
ak.shaman.coagulation = true
ak.shaman.bloodlet = true
ak.shaman.relapse = true
ak.jinxcount = ak.jinxcount or 0
ak.timers = ak.timers or {}
ak.occie = ak.occie or {}
ak.occie.aura = ak.occie.aura or {}
ak.occie.aura.physical = ak.occie.aura.physical or 0
ak.occie.aura.mental = ak.occie.aura.mental or 0
ak.occie.aura.unknownparse = ak.occie.aura.unknownparse or {}
ak.apostate = ak.apostate or {}
ak.shikudo = ak.shikudo or {}
ak.psion = ak.psion or {}
ak.psion.unweaving = ak.psion.unweaving or {}
ak.psion.unweaving.mind = ak.psion.unweaving.mind or 0
ak.psion.unweaving.body = ak.psion.unweaving.body or 0
ak.psion.unweaving.spirit = ak.psion.unweaving.spirit or 0
ak.mounted = false
ak.kata = ak.kata or 0
ak.twoh = ak.twoh or {}
ak.twoh.skull = 0
ak.twoh.ribs = 0
ak.twoh.tendons = 0
ak.twoh.wrist = 0
ak.twoh.modifier = 1
ak.twoh.salveconversion = {
   ["arms"] = "wrist",
   ["legs"] = "tendons",
   ["head"] = "skull",
   ["torso"] = "ribs",
}
ak.track = ak.track or {}
ak.slickfucks = ak.slickfucks or {}
ak.burstfucks = ak.burstfucks or {}
ak.alchemist = ak.alchemist or {}
ak.alchemist.humour = ak.alchemist.humour or {}
ak.alchemist.humour.sanguine = 0
ak.alchemist.humour.choleric = 0
ak.alchemist.humour.melancholic = 0
ak.alchemist.humour.phlegmatic = 0
ak.magi = ak.magi or {}
ak.magi.vibes = ak.magi.vibes or {
   ["Alarm"] = 0,
   ["Grounding"] = 0,
   ["Heat"] = 0,
   ["Creeps"] = 0,
   ["Dissipate"] = 0,
   ["Revelation"] = 0,
   ["Gravity"] = 0,
   ["Silence"] = 0,
   ["Harmony"] = 0,
   ["Energise"] = 0,
   ["Palpitation"] = 0,
   ["Adduction"] = 0,
   ["Stridulation"] = 0,
   ["Forest"] = 0,
   ["Tremors"] = 0,
   ["Disorientation"] = 0,
   ["Dissonance"] = 0,
   ["Oscillate"] = 0,
   ["Lullaby"] = 0,  
   ["Plague"] = 0, 
   ["Reverberation"] = 0,
}
ak.balancemodifier = ak.balancemodifier or "nimble"
ak.kata = ak.kata or 0
ak.bals = {}
ak.bals.salve = true
ak.bals.focus = true
ak.defs = ak.defs or {}
ak.defs.mass = false
ak.defs.shield = false
ak.defs.rebounding = false
affstrack = {
        venoms = {
                ["xentio"]     = "clumsiness",
                ["eurypteria"] = "recklessness",
                ["kalmia"]     = "asthma",
                ["delphinium"] = "sleep",
                ["digitalis"]  = "shyness",
                ["darkshade"]  = "darkshade",
                ["curare"]     = "paralysis",
                ["epteth"]     = "crippledarm",
                ["prefarar"]   = "sensitivity",
                ["monkshood"]  = "disloyalty",
                ["euphorbia"]  = "nausea",
                ["colocasia"]  = "deafblind",
                ["vernalius"]  = "weariness",
                ["epseth"]     = "crippledleg",
                ["larkspur"]   = "dizziness",
                ["slike"]      = "anorexia",
                ["notechis"]   = "haemophilia",
                ["vardrax"]    = "addiction",
                ["aconite"]    = "stupidity",
                ["selarnia"]   = "selarnia",
                ["gecko"]      = "slickness",
                ["scytherus"]  = "scytherus",
                ["voyria"]     = "voyria",
                ["pothealthleech"]= "healthleech",
                ["potloneliness"] = "loneliness",
                ["potepilepsy"]   = "epilepsy"
        },
 
        applied = {
                ["body"]  = {"anorexia","frozen","aflame","selarnia"},
                ["skin"]  = {"anorexia", "crippledarm", "crippledleg","frozen","selarnia"},
                ["torso"] = {"anorexia", "torso", "aflame", "hypothermia","selarnia"},
                ["head"]  = {"stuttering","head","crushedthroat"},
                ["arms"]  = {"crippledarm", "rightarm", "leftarm"},
                ["legs"]  = {"crippledleg","rightleg","leftleg"},
                ["ears"]  = {"scalded","head"}
        }, 
        eaten = {
                ["piece of kelp"]    = {"asthma", "clumsiness", "hypochondria", "sensitivity", "weariness", "healthleech", "parasite"},
                ["aurum flake"]      = {"asthma", "clumsiness", "hypochondria", "sensitivity", "weariness", "healthleech", "parasite"},
                ["lobelia seed"]     = {"tenderskin", "spiritburn", "agoraphobia", "claustrophobia", "loneliness", "masochism", "recklessness", "vertigo", "spiritdisrupt", "airdisrupt", "earthdisrupt", "firedisrupt", "waterdisrupt"},
                ["argentum flake"]   = {"tenderskin", "spiritburn", "agoraphobia", "claustrophobia", "loneliness", "masochism", "recklessness", "vertigo", "spiritdisrupt", "airdisrupt", "earthdisrupt", "firedisrupt", "waterdisrupt"},
                ["prickly ash bark"] = {"confusion", "dementia", "hallucinations", "hypersomnia", "paranoia"},
                ["stannum flake"]    = {"confusion", "dementia", "hallucinations", "hypersomnia", "paranoia"},
                ["bellwort flower"]  = {"retribution","timeloop","generosity", "pacifism","justice","lovers"},
                ["cuprum flake"]     = {"retribution","timeloop","generosity", "pacifism","justice","lovers"},
                ["bayberry bark"]    = {"blind"},
                ["arsenic pellet"]   = {"blind"},
                ["hawthorn berry"]   = {"deaf"},
                ["calamine crystal"] = {"deaf"},
                ["goldenseal root"]  = {"dizziness", "epilepsy", "impatience", "shyness", "stupidity", "depression", "shadowmadness"},
                ["plumbum flake"]    = {"dizziness", "epilepsy", "impatience", "shyness", "stupidity", "depression", "shadowmadness"},
                ["bloodroot leaf"]   = {"paralysis", "slickness"},
                ["magnesium chip"]   = {"paralysis", "slickness"},
                ["ginseng root"]     = {"addiction", "darkshade", "haemophilia", "lethargy", "nausea", "scytherus"},
                ["ferrum flake"]     = {"addiction", "darkshade", "haemophilia", "lethargy", "nausea", "scytherus"},
                ["rage"]             = {"timeloop","generosity", "pacifism","justice"},
                ["prickly pear"]     = {"pressure"},
								["calcite mote"]     = {"pressure"},
        },

        focused = {
								"stuttering",
                "lovers",
                "agoraphobia",
                "anorexia",
                "claustrophobia",
                "confusion",
                "dizziness",
                "epilepsy",
                "generosity",
                "loneliness",
                "masochism",
                "pacifism",
                "recklessness",
                "shyness",
                "stupidity",
                "vertigo",
                "airdisrupt",
                "firedisrupt",
                "waterdisrupt",
                "paranoia",
                "dementia",
                "hallucinations",            
        },

        treed = {
								"crushedthroat",
								"stuttering",
                "aeon",
                "healthleech",
                "haemophilia",
                "clumsiness",
                "aflame",
                "paranoia",
                "vertigo",
                "agoraphobia",
                "dizziness",
                "claustrophobia",
                "recklessness",
                "epilepsy",
                "addiction",
                "stupidity",
                "scytherus",
                "slickness",
                "generosity",
                "justice",
                "pacifism",
                "confusion",
                "voyria",
                "weariness",
                "hallucinations",
                "confusion",
                "disloyalty",
                "lethargy",
                "shyness",
                "sensitivity",
                "asthma",
                "crippledarm",
                "crippledleg",
                "darkshade",
                "impatience",
                "anorexia",
                "loneliness",
                "hypochondria", 
                "selarnia",
                "leftleg",
                "leftarm",
                "rightleg",
                "rightarm",
                "frozen",
                "airdisrupt",
                "earthdisrupt",
                "firedisrupt",
                "spiritdisrupt",
                "waterdisrupt",
                "hellsight",
                "nausea",
                "lovers",
                "parasite",
                "retribution",
                "depression",
                "shadowmadness",
								"timeloop",
								"manaleech",
								"tension",
								"unweavingspirit",
								"unweavingmind",
								"unweavingbody",
                "tenderskin", 
                "spiritburn", 
        },
 
        restored = {
                "crippledarm",
                "crippledleg",
                "rightleg",
                "leftleg",
                "rightarm",
                "leftarm",              
        },
 
        smoked = {
                "deadening",
                "disloyalty",
                "slickness",
                "manaleech",
                "aeon",
                "hellsight",
								"tension",
								"unweavingspirit",
        },

        score = {
                ["addiction"]      = 0,
                ["aeon"]           = 0,
                ["agoraphobia"]    = 0,
                ["anorexia"]       = 0,
                ["aflame"]         = 0,
                ["amnesia"]        = 0,
                ["armexpend"]      = 0,
                ["airfist"]        = 0,
                ["asthma"]         = 0,
                ["bitten"]         = 0,
                ["blind"]          = 0,
                ["blackout"]       = 0,
								["bloodfire"]      = 0,
                ["blisters"]       = 0,
                ["bound"]          = 0,
                ["brand"]          = 0,
                ["claustrophobia"] = 0,
                ["clumsiness"]     = 0,
                ["conflagrate"]    = 0,
                ["confusion"]      = 0,
								["corruption"]     = 0,
                ["crippledarm"]    = 0,
                ["crippledleg"]    = 0,
                ["crushedthroat"]  = 0,
                ["darkshade"]      = 0,
                ["deadening"]      = 0,
                ["deaf"]           = 0,
                ["dementia"]       = 0,
                ["depression"]     = 0,
                ["dehydrate"]      = 0,
                ["disloyalty"]     = 0,
                ["disrupt"]        = 0,
                ["dizziness"]      = 0,
                ["enlighten"]      = 0,
                ["epilepsy"]       = 0,
                ["frozen"]         = 0,
                ["generosity"]     = 0,
                ["guilt"]          = 0,
                ["haemophilia"]    = 0,
                ["hallucinations"] = 0,
                ["hamstring"]      = 0,
                ["hierophant"]     = 0,
                ["healthleech"]    = 0,
                ["hellsight"]      = 0,
                ["hypersomnia"]    = 0,
                ["hypochondria"]   = 0,
                ["hypothermia"]    = 0,
                ["impaleslash"]    = 0,
                ["impatience"]     = 0,
                ["inquisition"]    = 0,
                ["insomnia"]       = 0,
                ["justice"]        = 0,
                ["kola"]           = 0,
                ["latched"]        = 0,
                ["lethargy"]       = 0,
                ["lovers"]         = 0,
                ["loneliness"]     = 0,
                ["masochism"]      = 0,
                ["manaleech"]      = 0,
                ["mindclamp"]      = 0,
								["mindravaged"]    = 0,
                ["nausea"]         = 0,
                ["pacifism"]       = 0,
                ["paralysis"]      = 0,
                ["parasite"]       = 0,
                ["paranoia"]       = 0,
                ["petrified"]      = 0,
                ["prone"]          = 0,
								["preempt"]        = 0,
                ["recklessness"]   = 0,
                ["retribution"]    = 0,
                ["rixil"]          = 0,
                ["scalded"]        = 0,
                ["scytherus"]      = 0,
                ["selarnia"]       = 0,
                ["sensitivity"]    = 0,
                ["shadowmadness"]  = 0,
                ["shyness"]        = 0,
                ["slime"]          = 0,
                ["slickness"]      = 0,
                ["tempslickness"]  = 0,
                ["sleep"]          = 0,
                ["spiritburn"]     = 0,
                ["stupidity"]      = 0,
								["stuttering"]     = 0,
                ["surge"]          = 0,
                ["transfixed"]     = 0,
                ["tenderskin"]     = 0,
                ["timeflux"]       = 0,
                ["timeloop"]       = 0,
                ["trussed"]        = 0,
                ["unconscious"]     = 0,
                ["weariness"]      = 0,
                ["wrenchhead"]     = 0,
                ["wrenchtorso"]     = 0,
                ["whisperingmadness"] = 0,
                ["worm"]           = 0,
                ["vertigo"]        = 0,
                ["vitiate"]        = 0,
                ["voidfist"]       = 0,
                ["voyria"]         = 0,
                ["airdisrupt"]     = 0,
                ["earthdisrupt"]   = 0,
                
                ["trussed"]        = 0,
                ["unconscious"]    = 0,    
                ["firedisrupt"]    = 0,
                ["spiritdisrupt"]  = 0,
                ["waterdisrupt"]   = 0,
                ["rightleg"]       = 0,
                ["leftleg"]       = 0,
                ["rightarm"]       = 0,
                ["leftarm"]       = 0,
                ["head"]       = 0,
                ["torso"]       = 0,
								["tension"]     = 0,
								["pressure"]    = 0,
								["unweavingbody"] = 0,
								["unweavingmind"] = 0,
								["unweavingspirit"] = 0,
        },
 
        cureall = {
								"crushedthroat",
								"stuttering",
                "addiction",
                "aflame",
                "agoraphobia",
                "anorexia",
                "asthma",
                "claustrophobia",
                "clumsiness",
                "confusion",
                "crippledarm",
                "crippledleg",   
                "darkshade",     
                "deadening",                
                "dementia",      
                "disloyalty",     
                "disrupt",       
                "dizziness",      
                "epilepsy",     
                "generosity",     
                "haemophilia",    
                "hallucinations", 
                "healthleech",
                "hellsight",
                "hypersomnia",    
                "hypochondria",   
                "impatience",     
                "lethargy",       
                "loneliness", 
                "lovers",
                "manaleech",    
                "masochism",  
                "nausea",    
                "pacifism",       
                "paralysis",      
                "paranoia",       
                "recklessness",   
                "scytherus",    
                "selarnia",    
                "sensitivity",   
                "shyness",      
                "slickness",    
                "stupidity",     
                "weariness",     
                "vertigo",        
                "voyria",
								"tension",
								"pressure",
								"unweavingbody", 
								"unweavingmind", 
								"unweavingspirit",
                },
}
affstrack.hypo = {
   [1] = "nausea",
   [2] = "addiction",
   [3] = "lethargy",
}
affstrack.crushedpots = {
   ["piece of kelp"]   = "pothealthleech",
   ["bellwort flower"] = "vernalius",
   ["valerian leaf"]   = "gecko",
   ["lobelia seed"]    = "potloneliness",
   ["piece of slippery elm"] = "larkspur",
   ["kola nut"]        = "delphinium",
   ["goldenseal root"] = "potepilepsy",
   ["hawthorn berry"]  = "prefarar",
}

affstrack.physicallist = {"asthma","sensitivity","healthleech","haemophilia","clumsiness","darkshade","slickness","paralysis"}
affstrack.mentallist = {"addiction","dementia","stupidity","confusion","hypersomnia","paranoia","hallucinations","impatience","recklessness","masochism","agoraphobia","loneliness","lovers"}
affstrack.whisperlist = {"addiction","dementia","stupidity","confusion","hypersomnia","paranoia","hallucinations","impatience","recklessness","masochism","agoraphobia","loneliness","lovers"}
affstrack.enlightenlist = {"whisperingmadness","vertigo","dementia","stupidity","confusion","hypersomnia","paranoia","hallucinations","impatience","recklessness","masochism","agoraphobia","loneliness","lovers","dizziness","anorexia","hypochondria","claustrophobia"}
affstrack.smokelist = {"manaleech","deadening","disloyalty"}
affstrack.enlightenscore = 0
affstrack.accentatoscore = 0
affstrack.ginsengscore = 0
affstrack.pyradiusscore = 0
affstrack.goldenscore = 0
affstrack.kelpscore = 0
affstrack.mentalscore = 0
affstrack.totalaffs = 0
affstrack.impale = false
ak.randomaffs = 0
cecho("\n&lt;LimeGreen&gt;[&lt;DodgerBlue&gt;AK&lt;LimeGreen&gt;]: &lt;snow&gt;Loaded Module: AK Opponent Tracking!!")</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Hard Reset</name>
						<packageName></packageName>
						<script>--scoreup2
function ak.oresetparse()
target = target or "Austere"
ak.dragonTarget = false
ak.elementalTarget = false
ak.stack = ak.stack or "none"
affstrack.impale = false
targetparry = "unknown"
ak.bleeding = 0
ak.flyer = false
mycharacters = mycharacters or {}--This is for my Personal Gui
if swiftcount == nil then swiftcount = 0 end
disableTimer("Hypochondria Timer")
opponenteat = 0
promptset = {}
applycure = {}
ak.bals.salve = true
ak.bals.focus = true
opponenttree = 0

ak.defs.mass = true
ak.defs.shield = false
ak.defs.rebounding = true
ak.defs.reRebounding = false
ak.defs.sileris = true
ak.defs.curseward = true
ak.defs.holdbreath = false
ak.defs.speed = true

timerherb = 0
if ak.timers.apply then
	killTimer(ak.timers.apply)
	ak.timers.apply = false
end
if ak.timers.salvebackup then 
	killTimer(ak.timers.salvebackup) 
end
opponenthalftree = 0
timertree = 0
currentvenoms = {}
lastvenom = {}
targetlyred = 0
boilable = true
vodun = vodun or {}
lockcheck = false
ak.tza = false
knownrun = nil
parsedclasscures = false
ak.psion.unweaving.mind = 0
ak.psion.unweaving.body = 0
ak.psion.unweaving.spirit = 0
ak.resetbacktrack()
ak.twoh = ak.twoh or {}
ak.twoh.skull = 0
ak.twoh.ribs = 0
ak.twoh.tendons = 0
ak.twoh.wrist = 0
ak.occie.aura.physical =  0
ak.occie.aura.mental = 0
ak.alchemist.humour.sanguine = 0
ak.alchemist.humour.choleric = 0
ak.alchemist.humour.melancholic = 0
ak.alchemist.humour.phlegmatic = 0
ak.pervasion.initialbleed = false
ak.pervasion.hitcount = 0
ak.shaman.Relapseaff = "none"
ak.shaman.coagulation = true
ak.shaman.bloodlet = true
ak.shaman.relapse = true
ak.shaman.GetFashions = false
ak.psion.transcend = 0
ak.jinxcount = 0
if ak.scaldTimer then killTimer(ak.scaldTimer) end
if ak.tendonTimer then killTimer(ak.tendonTimer) end
if ak.skullTimer then killTimer(ak.skullTimer) end
if ak.wristTimer then killTimer(ak.wristTimer) end
if ak.ribTimer then killTimer(ak.ribTimer) end
ak.track.flown = false
ak.diagnosingoffbal = false
ak.CustomCureSend = false
ak.manapercent = 100
ak.healthpercent = 100
ak.currentmana = 5000
ak.maxmana = 5000
ak.currenthealth = 5000
ak.maxhealth = 5000
ak.engaged = false
ak.TorsoWrench = false
ak.HeadWrenchDisable = nil
ak.InitialWrench = nil
ak.propped = false
ak.SerpentRotateBite = false
ak.duress.pressure = 0
ak.duress.scourrelapse = false
ak.duress.stranglerelapse = false
ak.duress.zephyrrelapse = false
ak.duress.asphyxiate = false
ak.tumbling = false
for k,v in pairs(affstrack.score) do
   affstrack.score[k] = 0
end
affstrack.enlightenscore = 0
affstrack.ginsengscore = 0
affstrack.goldenscore = 0
affstrack.pyradiusscore = 0
affstrack.kelpscore = 0
affstrack.tramplescore = 0
affstrack.mentalscore = 0
affstrack.totalaffs = 0
ak.randomaffs = 0
ak.knownmaxhealth = ak.knownmaxhealth or {}
ak.limbs.limb_table_check(target)
if gmcp and ak.stack == "none" then
   ak.classenable()
end
ak.scoreup(target)
if gmcp and gmcp.Char and gmcp.Char.Vitals and gmcp.Char.Vitals.maxhp then
   ak.knownmaxhealth["Me"] = tonumber(gmcp.Char.Vitals.maxhp) or 5150
   ak.classlockadd()
   if not ak.displaydecide then 
      ak.classenable()
      if ak.nodisplay == false and not table.contains(mycharacters,gmcp.Char.Name.name) then 
         init() 
      end 
      ak.displaydecide = true 
   end
end
if ak.radiancestack then
   ak.stack = ak.radiancestack
   ak.radiancestack = nil
end
cecho("&lt;cyan&gt; Reset Success!\n\n")
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Soft Reset</name>
						<packageName></packageName>
						<script>function ak.softreset()
  ak.tza = false
	ak.shaman.Relapseaff = "none"
  ak.shaman.coagulation = true
  ak.shaman.bloodlet = true
	ak.shaman.GetFashions = false
	ak.pervasion.hitcount = 0
	ak.pervasion.initialbleed = false
	ak.bleeding = 0
  ak.shaman.relapse = true
	cecho("&lt;cyan&gt; \nINITATED A SOFT OPPONENT AFFLICTON RESET, DID NOT RESET ANY BALANCES!!")
	cecho("&lt;yellow&gt; \nINITATED A SOFT OPPONENT AFFLICTON RESET, DID NOT RESET ANY BALANCES!!")
	cecho("&lt;cyan&gt; \nINITATED A SOFT OPPONENT AFFLICTON RESET, DID NOT RESET ANY BALANCES!!")
	cecho("&lt;yellow&gt; \nINITATED A SOFT OPPONENT AFFLICTON RESET, DID NOT RESET ANY BALANCES!!\n\n")
	disableTrigger("Swiftstring")
	disableTimer("Hypochondria Timer")
	ak.resetbacktrack()
	targetlyred = 0
	applycure = {}
	ak.bals.salve = true
	ak.bals.focus = true
	if ak.tendonTimer then killTimer(ak.tendonTimer) end
	if ak.skullTimer then killTimer(ak.skullTimer) end
	if ak.wristTimer then killTimer(ak.wristTimer) end
	if ak.ribTimer then killTimer(ak.ribTimer) end
	if ak.timers.salvebackup then killTimer(ak.timers.salvebackup) end
	local wasdehydrated = false
	local wastimefluxed = false
	local hieroup = false
	local rixilup = false
	if affstrack and affstrack.score then
   	if affstrack.score.dehydrate == 100 then
  	    wasdehydrated = true
  	 end
  	 if affstrack.score.timeflux == 100 then
  	    wastimefluxed = true
  	 end
	end	
	if affstrack.score.hierophant == 100 then
		hieroup = true
	end
	if affstrack.score.rixil == 100 then
		rixilup = true
	end
	ak.engaged = false

   for k,v in pairs(affstrack.score) do
      affstrack.score[k] = 0
   end

	if hieroup then 
		affstrack.score.hierophant = 100
	end
	if rixilup then 
		affstrack.score.rixil = 100
	end
	affstrack.enlightenscore = 0
	affstrack.ginsengscore = 0
	affstrack.goldenscore = 0
	affstrack.pyradiusscore = 0
	affstrack.kelpscore = 0
	affstrack.tramplescore = 0
	affstrack.mentalscore = 0
	affstrack.totalaffs = 0
	ak.twoh = ak.twoh or {}
	ak.twoh.skull = 0
	ak.twoh.ribs = 0
	ak.twoh.tendons = 0
	ak.twoh.wrist = 0
	ak.occie.aura.physical =  0
	ak.occie.aura.mental = 0
	ak.alchemist.humour.sanguine = 0
	ak.alchemist.humour.choleric = 0
	ak.alchemist.humour.melancholic = 0
	ak.alchemist.humour.phlegmatic = 0
	ak.randomaffs = 0
	opponenthalftree = 0
	if wasdehydrated then
	   affstrack.score.dehydrate = 100
	end
	if wastimefluxed then
	   affstrack.score.timeflux = 100
	end
	ak.track.flown = false
	ak.currentmana = 5000
	ak.maxmana = 5000
	ak.currenthealth = 5000
	ak.maxhealth = 5000
	ak.manapercent = 100
	ak.healthpercent = 100
	ak.classlockadd()
  if ak.radiancestack then
    ak.stack = ak.radiancestack
    ak.radiancestack = nil
  end
	ak.alchemist.humour.sanguine = 0
	ak.alchemist.humour.choleric = 0
	ak.alchemist.humour.phlegmatic = 0
	ak.alchemist.humour.melancholic = 0
  ak.scoreup(target)
end</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Multiuse Functions</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>oclass</name>
							<packageName></packageName>
							<script>
NoMiddle = NoMiddle or {}

function ak.MonkType()
  if gmcp.Char.Vitals and gmcp.Char.Vitals.charstats[4] and string.find(gmcp.Char.Vitals.charstats[4], "Form")
  then
    return "Shikudo"
  else
    return "Tekura"
  end
end

function ak.KillTriggers()
	disableKey("Shaman Keys")
	disableKey("Dragon Keys")
	disableTrigger("Air Lord Group")
	disableTrigger("Water Lord Group")
	disableTrigger("Monk Group")
	disableTrigger("Sentinel Group")
	disableTrigger("Depthswalker Group")
	disableTrigger("Runewarden Group")
	disableTrigger("2h Group")
	disableTrigger("Targossas Group")
	disableTrigger("Totem Group")
	disableTrigger("Serpent Group")
	disableTrigger("Jester Group")
	disableTrigger("Tarot Group")
	disableTrigger("Magi Group")
	disableTrigger("Psion Group")
	disableTrigger("Apostate Group")
	disableTrigger("Shaman Group")
	disableTrigger("Dragon Group")
	disableTrigger("Sword &amp; Board Group")
	disableTrigger("Bard Group")
	disableTrigger("Blademaster Group")
  disableTrigger("Fire Lord Group")
	disableTrigger("Occultist Group")
	disableTrigger("Sylvan Group")
	disableTrigger("Alchemist Group")
  disableTrigger("Targossas Group")
  disableTrigger("Priest Group")
end

function ak.classenable()
  if ak.CustomGuiEnable then
    ak.CustomGuiEnable()
  end
  if ak.morphingCheck then
    ak.morphingCheck()
  end
  ak.defaultstack()
  if gmcp.Char.Status.race:match("Dragon") or gmcp.Char.Status.class ~= "Shaman" then
    swiftcount = 0
  end
  if gmcp.Char.Status.race:match("Dragon") then
    ak.KillTriggers()
    enableTrigger("Dragon Group")
		if not table.contains(ak.MovementKeys, gmcp.Char.Name.name) then enableKey("Dragon Keys") end
    cecho("&lt;yellow&gt;\n\nDRAGON ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Monk" then
    ak.KillTriggers()
    enableTrigger("Monk Group")
    cecho("&lt;yellow&gt;\n\nMONK ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Priest" then
    ak.KillTriggers()
    enableTrigger("Targossas Group")
    enableTrigger("Priest Group")
    cecho("&lt;yellow&gt;\n\nPRIEST ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Magi" then
    ak.KillTriggers()
    enableTrigger("Magi Group")
    cecho("&lt;yellow&gt;\n\nMAGI ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Sylvan" then
    ak.KillTriggers()
    enableTrigger("Sylvan Group")
    cecho("&lt;yellow&gt;\n\nSYLVAN ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Shaman" then
		ak.KillTriggers()
    enableKey("Shaman Keys")
    enableTrigger("Shaman Group")
    cecho("&lt;yellow&gt;\n\nSHAMAN ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Serpent" then
    ak.KillTriggers()
    enableTrigger("Serpent Group")
    cecho("&lt;yellow&gt;\n\nSERPENT ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Jester" then
    ak.KillTriggers()
    enableTrigger("Tarot Group")
    enableTrigger("Jester Group")
    cecho("&lt;yellow&gt;\n\nJESTER\n\n")
  elseif gmcp.Char.Status.class == "Alchemist" then
    ak.KillTriggers()
		enableTrigger("Alchemist Group")
    cecho("&lt;yellow&gt;\n\nALCHEMIST\n\n")
  elseif gmcp.Char.Status.class == "Infernal" or gmcp.Char.Status.class == "Paladin" or gmcp.Char.Status.class == "Runewarden" then
    ak.KillTriggers()
		if gmcp.Char.Status.class == "Paladin" then
      enableTrigger("Targossas Group")
    elseif gmcp.Char.Status.class == "Runewarden" then
      enableTrigger("Runewarden Group")
    end
    enableTrigger("Totem Group")
    enableTrigger("2h Group")
    enableTrigger("Sword &amp; Board Group")
    cecho("&lt;yellow&gt;\n\nKNIGHT ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Sentinel" then
    ak.KillTriggers()
    enableTrigger("Sentinel Group")
    cecho("&lt;yellow&gt;\n\nSENTINEL ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Occultist" then
    ak.KillTriggers()
    enableTrigger("Tarot Group")
    enableTrigger("Occultist Group")
    cecho("&lt;yellow&gt;\n\nOCCULTIST ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Bard" then
    ak.KillTriggers()
    enableTrigger("Bard Group")
    cecho("&lt;yellow&gt;\n\nBARD ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Depthswalker" then
    ak.KillTriggers()
    enableTrigger("Depthswalker Group")
    cecho("&lt;yellow&gt;\n\nDEPTHSWALKER ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Apostate" then
    ak.KillTriggers()
    enableTrigger("Apostate Group")
    cecho("&lt;yellow&gt;\n\nABOSTATE ENABLED\n\n")
  elseif gmcp.Char.Status.class == "water Elemental Lord" then
	  ak.KillTriggers()
    enableTrigger("Water Lord Group")
    cecho("&lt;yellow&gt;\n\nWATER ELEMENTAL ENABLED\n\n")
  elseif gmcp.Char.Status.class == "air Elemental Lord" then
    ak.KillTriggers()
    enableTrigger("Air Lord Group")
    cecho("&lt;yellow&gt;\n\nAIR ELEMENTAL ENABLED\n\n")
	elseif gmcp.Char.Status.class == "fire Elemental Lord" then
    ak.KillTriggers()
    enableTrigger("Fire Lord Group")
    cecho("&lt;yellow&gt;\n\nFire ELEMENTAL ENABLED\n\n")
  elseif gmcp.Char.Status.class == "Blademaster" then
    ak.KillTriggers()
    enableTrigger("Blademaster Group")
    cecho("&lt;yellow&gt;\n\nBLADEMASTER ENABLED\n\n")
	elseif gmcp.Char.Status.class == "Psion" then
    ak.KillTriggers()
		enableTrigger("Psion Group")
		enableKey("Psion Keys")
    cecho("&lt;yellow&gt;\n\nPsion ENABLED\n\n")
  end
  ak.scoreup(target)
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>oaff check</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.check(what, number)
   if not number then local number = 100 end
   if table.contains(affstrack.score, what) then
      if affstrack.score[what] &gt;= number then
         return true
      else
         return false
      end
   elseif table.contains(affstrack.venoms, what) then
      if affstrack.score[affstrack.venoms[what]] &gt;= number then
         return true
      else
         return false
      end
   end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>System Status Checking</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.syspause()
   if svo then 
      if svo.affl.retardation then 
         return true
      else
         return false
      end
   elseif wsys then
      if wsys.paused or wsys.softpaused then 
         return true
      else
         return false
      end
   else
       return false
   end
end

function inretardation()
   if svo then 
      if svo.affl.retardation then 
         return true
      else
         return false
      end
   elseif wsys then
      if wsys.isslowed() then 
         return true
      else
         return false
      end
   else
       return false
   end
end

function inaeon()
   if svo then 
      if svo.affl.aeon then 
         return true
      else
         return false
      end
   elseif wsys then
      if wsys.isslowed() then 
         return true
      else
         return false
      end
   else
       return false
   end
end

function inlyre()
   if svo then
      if svo.conf.lyre then
         return true
      else
         return false
      end
   elseif wsys then
		if wsys.uselyre == true and wsys.def.lyre == true then
       	return true
		else
			return false
		end
   else 
       return false
   end
end 

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>System Specific Functions</name>
							<packageName></packageName>
							<script>function ak.deleteFull()
   if svo then
	 		svo.deleteLineP()
	 else
      deleteFull() --Wsys Has An Overwrite
   end
end

function ak.showPrompt()
	if wsys then
		wsys.showPrompt()
	elseif svo and svo.showprompt then
		echo("\n")
		svo.showprompt()
    --was svo.showPrompt() which was an error
	else
		send("")
	end
end

if wsys then
	function wsys.showPrompt()
	  local promptstring = wsys.aff.blackout and wsys.settings.blackoutprompt or wsys.settings.prompt
	  --sub out the # color tags
	  promptstring = string.gsub(promptstring, "#([A-Za-z_:]+)", wsys.promptColorSub )
	  --sub out the @ prompt tags
	  promptstring = string.gsub(promptstring, "@(%w+)", wsys.promptTagSub )
	
	  if wsys.def.lyre then promptstring = promptstring .. "&lt;gold&gt; L" end
		if wsys.uselyre then promptstring = promptstring .. "&lt;green&gt; *[&lt;white&gt;LYRE MODE&lt;green&gt;]*" end 
		
	  if wsys.vmode then promptstring = promptstring ..  "&lt;MediumVioletRed&gt; vivi" end
	  if wsys.heartseedmode then promptstring = promptstring ..  "&lt;firebrick&gt; H&lt;LimeGreen&gt;Seed" end
	  if wsys.bardmode then promptstring = promptstring .. "&lt;firebrick&gt; BARD" end
		cecho("\n"..promptstring)
	end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>oscore</name>
							<packageName></packageName>
							<script>--scoreup
-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.scoreup(whom)
if ak.expertdiagnose and not gmcp.Char.Status.race:match("Dragon") and not ak.pause and not ak.syspause() then
   ak.expertRun()
end
--"Haemophilia, clumsiness, sensitivity, healthleech, darkshade, lethargy."
affstrack.accentatoscore = affstrack.score.impatience + affstrack.score.paranoia + affstrack.score.claustrophobia + affstrack.score.vertigo + affstrack.score.confusion + affstrack.score.dizziness + affstrack.score.stupidity + affstrack.score.addiction + affstrack.score.epilepsy + affstrack.score.anorexia + affstrack.score.generosity + affstrack.score.amnesia
affstrack.mentalscore = affstrack.accentatoscore + affstrack.score.agoraphobia + affstrack.score.recklessness
affstrack.mentalscore = affstrack.mentalscore / 100
affstrack.accentatoscore = affstrack.accentatoscore / 100

affstrack.kelpscore = affstrack.score.healthleech + affstrack.score.asthma + affstrack.score.clumsiness + affstrack.score.hypochondria + affstrack.score.sensitivity + affstrack.score.weariness 
affstrack.kelpscore = affstrack.kelpscore / 100
affstrack.ginsengscore = affstrack.score.addiction + affstrack.score.darkshade + affstrack.score.haemophilia + affstrack.score.lethargy + affstrack.score.nausea + affstrack.score.scytherus
affstrack.ginsengscore = affstrack.ginsengscore / 100

affstrack.goldenscore =  affstrack.score.dizziness + affstrack.score.epilepsy + affstrack.score.impatience + affstrack.score.shyness + affstrack.score.stupidity
affstrack.goldenscore = affstrack.goldenscore / 100

affstrack.pyradiusscore = affstrack.score.clumsiness + affstrack.score.lethargy + affstrack.score.haemophilia + affstrack.score.healthleech + affstrack.score.sensitivity + affstrack.score.darkshade 
affstrack.pyradiusscore = affstrack.pyradiusscore / 100
softscore = affstrack.score.anorexia + affstrack.score.slickness + affstrack.score.asthma
softscore = softscore / 100
truescore = affstrack.score.paralysis + affstrack.score.impatience + affstrack.score.anorexia + affstrack.score.slickness + affstrack.score.asthma
truescore = truescore / 100
affstrack.tramplescore = 0
ak.trample()
affstrack.totalaffs = 0
affstrack.enlightenscore = 0
affstrack.whisperscore = 0
for k,v in pairs(affstrack.score) do
   if v &gt; 1 then
      affstrack.totalaffs = affstrack.totalaffs + v
      if table.contains(affstrack.enlightenlist, k) then
         affstrack.enlightenscore = affstrack.enlightenscore + v
      end
      if table.contains(affstrack.whisperlist, k) then
         affstrack.whisperscore = affstrack.whisperscore + v
      end
   end
end
affstrack.totalaffs = affstrack.totalaffs / 100
affstrack.enlightenscore = affstrack.enlightenscore / 100
affstrack.whisperscore = affstrack.whisperscore / 100
if ak.tzantzajinxed then
	ak.tzantzajinxed = false
elseif target and not ak.pause and not ak.syspause() then 
   ak.serveraliases() 
end
ak.prompt.scoreup()
if ak.nodisplay then ak.noDisplay() else ak.refreshAffs() end
end
  --&lt;3
function ak.trample() 
   affstrack.tramplescore = 0
   affstrack.tramplescore = affstrack.score["leftarm"] + affstrack.score["leftleg"] + affstrack.score["rightleg"] + affstrack.score["rightarm"]
   affstrack.tramplescore = affstrack.tramplescore / 100
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>oscore edit functions</name>
							<packageName></packageName>
							<script>--OppGainedAff

function OppGainedAff(aff)
	if not aff then return end
	local affStr = {}
	aff = aff:lower()
  if string.find(aff," ") then                          --Multi Venoms
	 		ak.eatsbetweenaffs = 0
      for word in string.gmatch(aff, "%a+") do
         if (word == "sensitivity" or word == "prefarar") and affstrack.score.deaf == 0 then 
            word = "deaf" 
         end
         if table.contains(affstrack.mentallist, word) then
            ak.occie.aura.mental = ak.occie.aura.mental + 1 
         end
         if table.contains(affstrack.physicallist, word) then
            ak.occie.aura.physical = ak.occie.aura.physical + 1 
         end
				 if word == "amnesia" then
				    affstrack.score.amnesia = 100
				    if amnesiatimer then 
							killTimer(amnesiatimer)
							amnesiatimer = nil 
						end
            amnesiatimer = tempTimer(1, [[OppLostAff("amnesia")]])
         elseif string.find(word,"unweave") then
            affstrack.score[word] = affstrack.score[word] + 100
            table.insert(affStr,word:title())
         elseif word == "wrenchhead" then
            affstrack.score.wrenchhead = 100
            OppGainedAff("dizziness")
            disableTimer("Wrench Head Timer")
            enableTimer("Wrench Head Timer")
            ak.HeadWrenchDisable = tempTimer(24,[[affstrack.score.wrenchhead = 0;ak.scoreup(target)]])
            ak.InitialWrench = tempTimer(3.5,[[OppGainedAff("dizziness")]])
            table.insert(affStr,word:title())
				 elseif word == "armexpend" then
            affstrack.score.armexpend = 100
            ak.armexpendtimer = tempTimer(8,[[affstrack.score.armexpend = 0;ak.scoreup(target)]])
            table.insert(affStr,word:title())	
				 elseif word == "blisters" then
            affstrack.score.blisters = 100
            ak.blisterkiller = tempTimer(20,[[affstrack.score.blisters = 0;ak.scoreup(target)]])
            table.insert(affStr,word:title())	
				 elseif word == "hamstring" then
            affstrack.score.hamstring = 100
            ak.hamstringtimer = tempTimer(9.5,[[affstrack.score.hamstring = 0;ak.scoreup(target)]])
            table.insert(affStr,word:title())         
				 elseif word == "worm" then
            affstrack.score.worm = 100
            ak.wormtimer = tempTimer(20,[[affstrack.score.worm = 0;ak.scoreup(target)]])
            table.insert(affStr,word:title())	                      				 
         elseif word == "wrenchtorso" then
            affstrack.score.wrenchtorso = 100
            ak.TorsoWrenchDisable = tempTimer(24,[[affstrack.score.wrenchtorso = 0;ak.scoreup(target)]])
            table.insert(affStr,word:title())
         elseif word == "epseth" or word == "crippledleg" then
            if affstrack.score["leftleg"] &lt; 100 then       
               affstrack.score["leftleg"] = 100
               ak.AddedAffReset("leftleg") 
						table.insert(affStr,word:title())
            elseif affstrack.score["rightleg"] &lt; 100 then       
               affstrack.score["rightleg"] = 100
               ak.AddedAffReset("rightleg") 
						table.insert(affStr,word:title())
            end
         elseif word == "epteth" or word == "crippledarm" then
            if affstrack.score["leftarm"] &lt; 100 then       
               affstrack.score["leftarm"] = 100
               ak.AddedAffReset("leftarm") 
						table.insert(affStr,word:title())
            elseif affstrack.score["rightarm"] &lt; 100 then       
               affstrack.score["rightarm"] = 100
               ak.AddedAffReset("rightarm") 
						table.insert(affStr,word:title())
            end						
				 elseif word == "frozen" then
            affstrack.score[word] = affstrack.score[word] + 100 
            table.insert(affStr,aff:title()) 
            if affstrack.score.frozen &gt; 300 then
               affstrack.score.frozen = 300
            end							
				 elseif word == "deepfreeze" then
            affstrack.score["frozen"] = affstrack.score["frozen"] + 200 
            table.insert(affStr,"Frozen") 
            if affstrack.score.frozen &gt; 300 then
               affstrack.score.frozen = 300
            end										
         elseif affstrack.score[word] then
            if affstrack.score[word] &lt; 100 then       
               affstrack.score[word] = 100
               ak.AddedAffReset(word)
               if (word == "deaf" or word == "sensitivity") then 
                  word = "prefarar" 
               end   
               table.insert(affStr,word:title())
            end
         elseif affstrack.venoms[word] then 
            if affstrack.score[affstrack.venoms[word]] &lt; 100 then    
               affstrack.score[affstrack.venoms[word]] = 100
               ak.AddedAffReset(affstrack.venoms[word])
               if (word == "deaf" or word == "sensitivity") then 
                  word = "prefarar" 
               end
               table.insert(affStr,affstrack.venoms[word]:title())  
            end
         end
		  end
	else          --Single venom
		 ak.eatsbetweenaffs = 1
     if (aff == "sensitivity" or aff == "prefarar") and affstrack.score.deaf == 0 then 
        aff = "deaf" 
     end  
     if table.contains(affstrack.mentallist, aff) then
        ak.occie.aura.mental = ak.occie.aura.mental + 1 
     end
     if table.contains(affstrack.physicallist, aff) then
        ak.occie.aura.physical = ak.occie.aura.physical + 1 
     end
		 if aff == "amnesia" then
				affstrack.score.amnesia = 100
				if amnesiatimer then 
				   killTimer(amnesiatimer)
				   amnesiatimer = nil 
				end
        amnesiatimer = tempTimer(1, [[OppLostAff("amnesia")]])
     elseif string.find(aff,"unweave") then
        affstrack.score[aff] = affstrack.score[aff] + 100
        table.insert(affStr,aff:title())
     elseif aff == "wrenchhead" then
        affstrack.score.wrenchhead = 100
        affstrack.score.torso = 100
        OppGainedAff("dizziness")
        disableTimer("Wrench Head Timer")
        enableTimer("Wrench Head Timer")
        ak.HeadWrenchDisable = tempTimer(24,[[affstrack.score.wrenchhead = 0;ak.scoreup(target)]])
        ak.InitialWrench = tempTimer(3.5,[[OppGainedAff("dizziness")]])
        table.insert(affStr,aff:title())			
		 elseif aff == "blisters" then
        affstrack.score.blisters = 100
        ak.blisterkiller = tempTimer(20,[[affstrack.score.blisters = 0;ak.scoreup(target)]])
        table.insert(affStr,aff:title())	
     elseif aff == "wrenchtorso" then
        affstrack.score.wrenchtorso = 100
        ak.TorsoWrenchDisable = tempTimer(24,[[affstrack.score.wrenchtorso = 0;ak.scoreup(target)]])
        table.insert(affStr,aff:title())
		 elseif aff == "armexpend" then
        affstrack.score.armexpend = 100
        ak.TorsoWrenchDisable = tempTimer(8,[[affstrack.score.armexpend = 0;ak.scoreup(target)]])
        table.insert(affStr,aff:title())	
		 elseif aff == "hamstring" then
         affstrack.score.hamstring = 100
         ak.TorsoWrenchDisable = tempTimer(9.5,[[affstrack.score.hamstring = 0;ak.scoreup(target)]])
         table.insert(affStr,aff:title())	
		 elseif aff == "worm" then
          affstrack.score.worm = 100
          ak.wormtimer = tempTimer(20,[[affstrack.score.worm = 0;ak.scoreup(target)]])
          table.insert(affStr,aff:title())	                  
     elseif aff == "epseth" or aff == "crippledleg" then
        if affstrack.score["leftleg"] &lt; 100 then       
           affstrack.score["leftleg"] = 100
           ak.AddedAffReset("leftleg") 
        elseif affstrack.score["rightleg"] &lt; 100 then       
           affstrack.score["rightleg"] = 100
           ak.AddedAffReset("rightleg") 
        end
        table.insert(affStr,"Epseth")
     elseif aff == "epteth" or aff == "crippledarm" then
        if affstrack.score["leftarm"] &lt; 100 then       
           affstrack.score["leftarm"] = 100
           ak.AddedAffReset("leftarm") 
        elseif affstrack.score["rightarm"] &lt; 100 then       
           affstrack.score["rightarm"] = 100
           ak.AddedAffReset("rightarm") 
        end
        table.insert(affStr,"Epteth")    
		elseif aff == "frozen" then 
        affstrack.score[aff] = affstrack.score[aff] + 100
        table.insert(affStr,aff:title())
        if affstrack.score.frozen &gt; 300 then
           affstrack.score.frozen = 300
        end 
		elseif aff == "deepfreeze" then
        affstrack.score["frozen"] = affstrack.score["frozen"] + 200 
        table.insert(affStr,"Frozen") 
        if affstrack.score.frozen &gt; 300 then
           affstrack.score.frozen = 300
        end		                                         
     elseif affstrack.score[aff] then
        if affstrack.score[aff] &lt; 100 then       
           affstrack.score[aff] = 100
           ak.AddedAffReset(aff)
           if aff == "deaf" or aff == "sensitivity" then 
              aff = "prefarar" 
           end
			   if aff == "hypochondria" then
				   enableTimer("Hypochondria Timer")
			   end
			   if aff == "hellsight" then
				   affstrack.score.slickness = 100
			   end
           table.insert(affStr,aff:title())   
        end
     elseif affstrack.venoms[aff] then 
        if affstrack.score[affstrack.venoms[aff]] &lt; 100 then    
           affstrack.score[affstrack.venoms[aff]] = 100
           ak.AddedAffReset(affstrack.venoms[aff])
           if aff == "deaf" or aff == "sensitivity" then 
              aff = "prefarar" 
           end
           table.insert(affStr,affstrack.venoms[aff]:title())       
        end 
     end
	end
	if #affStr &gt; 0 then 
			ak.echogain(table.concat(affStr, " ")) 
			if rtpkrnl then ApK(table.concat(affStr, " rtpkrnl ")) end--AKG Display
	end
	ak.scoreup(target)
end

function OppLostAff(aff)
	local affStr = ""
	aff = aff:lower()
	if string.find(aff," ") then
		for word in string.gmatch(aff, "%a+") do
			if affstrack.score[word] &gt; 0 then
				affstrack.score[word] = 0
				affStr = word:title()
			end
		end
	else
		if affstrack.score[aff] &gt; 0 then
			affstrack.score[aff] = 0
			affStr = aff:title()
		end
	end
   if affStr:len() &gt; 0 then ak.echolost(affStr) end
	ak.scoreup(target)

end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Target Check</name>
							<packageName></packageName>
							<script>--Targetted Script
-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function IsTargetted(person)
   if not person then return end
   target = target or "Austere"
   if person == target then 
     return true
   elseif string.starts(person, target) then
      return true
   else
      return false
   end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>PreAlias</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
if not PreAliasGeneral then
   function PreAliasGeneral()
      local sendon = "stand"
      return sendon
   end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Depthswalker Functions</name>
							<packageName></packageName>
							<script>ak.ShadowList = ak.ShadowList or {}
ak.age = function()
	if svo then
		return svo.stats.age
	elseif wsys then
    if not wsys.stats.age then return 0 end
		return wsys.stats.age 
	end
end

ak.haveshadow = function()
	if table.contains(ak.ShadowList,target:lower():title()) then
		return true
	else
		return false
	end
end

ak.removeshadow = function(name)
    if table.contains(ak.ShadowList,name:lower():title()) then
        table.remove(ak.ShadowList,table.index_of(ak.ShadowList,name:lower():title()))
    end
end

ak.addshadow = function(name)
	if not table.contains(ak.ShadowList,name:lower():title()) then
		table.insert(ak.ShadowList,name:lower():title())
	end
	cecho("&lt;cyan&gt;\nShadow Claimed!\n")
end

ak.instill = function(instill)
	if instill == "Degeneration" then
		if affstrack.score.clumsiness &lt; 100 then
			OppGainedAff("clumsiness")
		elseif affstrack.score.weariness &lt; 100 then
			OppGainedAff("weariness")
		else
			OppGainedAff("paralysis")
		end
	elseif instill == "Depression" then
		if affstrack.score.depression &lt; 100 then
			OppGainedAff("depression")
		elseif affstrack.score.nausea &lt; 100 then
			OppGainedAff("nausea")
		else
			OppGainedAff("hypochondria")
		end
	elseif instill == "Retribution" then
		if affstrack.score.justice &lt; 100 then
			OppGainedAff("justice")
		else
			OppGainedAff("retribution")
		end
	elseif instill == "Madness" then
		if affstrack.score.shadowmadness &lt; 100 then
			OppGainedAff("shadowmadness")
		elseif affstrack.score.vertigo &lt; 100 then
			OppGainedAff("vertigo")
		else
			OppGainedAff("hallucinations")
		end
	elseif instill == "Leach" then
		if affstrack.score.parasite &lt; 100 then
			OppGainedAff("parasite")
		elseif affstrack.score.healthleech &lt; 100 then
			OppGainedAff("healthleech")
		else
			OppGainedAff("manaleech")
		end
	end
end

ak.fullinstill = function(instill)
	if instill == "Degeneration" then
		OppGainedAff("weariness")
		OppGainedAff("clumsiness")
		OppGainedAff("paralysis")
	elseif instill == "Depression" then
		OppGainedAff("depression")
		OppGainedAff("nausea")
		OppGainedAff("hypochondria")
		OppGainedAff("anorexia")
		OppGainedAff("masochism")
	elseif instill == "Retribution" then
		OppGainedAff("justice")
		OppGainedAff("retribution")
	elseif instill == "Madness" then
		OppGainedAff("shadowmadness")
		OppGainedAff("vertigo")
		OppGainedAff("hallucinations")
	elseif instill == "Leach" then
		OppGainedAff("parasite")
		OppGainedAff("healthleech")
		OppGainedAff("manaleech")
		ak.addshadow()
	end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Fracture Relapsing</name>
							<packageName></packageName>
							<script>function ak.skullHit()
  if isActive("AK_SkullTimer","timer") == 0 and ak.twoh.skull &gt; 0 then
		ak.skullcount = 0
		OppGainedAff("nausea")
		enableTimer("AK_SkullTimer")
	elseif ak.twoh.skull == 0 then
		ak.skullcount = 0
		disableTimer("AK_SkullTimer")
	end
end

function ak.tendonHit()
	if isActive("AK_TendonTimer","timer") == 0 and ak.twoh.tendons &gt; 0 then
		ak.tendonscount = 0
		OppGainedAff("clumsiness")
		enableTimer("AK_TendonTimer")
	elseif ak.twoh.tendons == 0 then
		ak.tendonscount = 0
		disableTimer("AK_TendonTimer")
	end
end

function ak.ribHit()
	if isActive("AK_RibsTimer","timer") == 0 and ak.twoh.ribs &gt; 0 then
		ak.ribscount = 0
		OppGainedAff("prefarar")
		enableTimer("AK_RibsTimer")
	elseif ak.twoh.ribs == 0 then
		ak.ribscount = 0
		disableTimer("AK_RibsTimer")
	end
end

function ak.wristHit()
	if ak.twoh.wrist &lt; 1 then
		if ak.wristTimer then killTimer(ak.wristTimer) end
	elseif ak.twoh.wrist == 1 then
		if ak.wristTimer then killTimer(ak.wristTimer) end
		ak.wristTimer = tempTimer(5, [[ak.wristTick()]])
	elseif ak.twoh.wrist == 2 then
		if ak.wristTimer then killTimer(ak.wristTimer) end
		ak.wristTimer = tempTimer(4, [[ak.wristTick()]])
	elseif ak.twoh.wrist == 3 then
		if ak.wristTimer then killTimer(ak.wristTimer) end
		ak.wristTimer = tempTimer(3, [[ak.wristTick()]])
	elseif ak.twoh.wrist == 4 then
		if ak.wristTimer then killTimer(ak.wristTimer) end
		ak.wristTimer = tempTimer(2, [[ak.wristTick()]])
	elseif ak.twoh.wrist &gt;= 5 then
		if ak.wristTimer then killTimer(ak.wristTimer) end
		ak.wristTimer = tempTimer(1, [[ak.wristTick()]])
	end 
end

function ak.wristTick()
	ak.wristHit()
end

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Gmcp Room</name>
							<packageName></packageName>
							<script>function ak.roomupdate()
	 ak.MountLook()
	 ak.RoomDefs()
   if gmcp.Room.Info.num ~= ak.lastroom then
	 		if wsys and wsys.retard then
				wsys.retardationOff()
			end
      ak.ae = ak.ae or 0
      ak.blocked = nil
      if ak.disturbed or ak.ae &gt; 0 or ak.feedback then
         ak.disturbed = false
         ak.ae = 0
         ak.feedback = false
         ak.scoreup(target)
      end
      if ak.infernohere then 
         ak.infernohere = false
         ak.scoreup(target)
      end
   end
   ak.lastroom = gmcp.Room.Info.num
end

registerAnonymousEventHandler("gmcp.Room.Info", "ak.roomupdate")
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Staff Affliction Tracking</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.staffaff(staffhit)
  if staffhit == "airstaff" then
	   OppGainedAff("prone")
  elseif staffhit == "firestaff" then
	   ak.flameon("notadditive")
  --elseif staffhit == "earthstaff" then
	   --OppGainedAff("prone")
  elseif staffhit == "waterstaff" then
	   OppGainedAff("frozen")
  end
end

--DO NOT MESS WITH THIS--</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Attack Sets</name>
							<packageName></packageName>
							<script>--setattack
-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.serveraliases()
   if ak.debug then cecho("\nScoring Up") end
   ak.stack = ak.stack or "none"
   if ak.stack == "NoOne" then --Deliverance! 
      ak.aliasreset()
   elseif gmcp.Char.Status.race:match("Dragon") and not inlyre() then                                                                                           -- Dragon --
     	if ak.dragon.setattacks then
				ak.dragon.setattacks()
			end
   elseif gmcp.Char.Status.class == "Occultist" and not inlyre() then
      if ak.occie.setattacks then
				ak.occie.setattacks()
			end
   elseif gmcp.Char.Status.class == "Monk" and not inlyre() then
      if ak.monk.setattacks then
				ak.monk.setattacks()
			end
   elseif gmcp.Char.Status.class == "Magi" and not inlyre() then 
      if ak.magi.setattacks then
				ak.magi.setattacks()
			end
   elseif gmcp.Char.Status.class == "Serpent" and not inlyre() then   
      if ak.serpent.setattacks then
				ak.serpent.setattacks()
			end  
   elseif gmcp.Char.Status.class == "Sentinel" and not inlyre() then
      if ak.sentinel.setattacks then
				ak.sentinel.setattacks()
			end
   elseif gmcp.Char.Status.class == "Shaman" and not inlyre() and not ak.tza then  
      if ak.shaman.setattacks then
			   ak.shaman.setattacks()
			end
   elseif gmcp.Char.Status.class == "Priest" and not inlyre() then 
      if ak.priest.setattacks then
				ak.priest.setattacks()
			end
   elseif gmcp.Char.Status.class == "Apostate" and not inlyre() then                                                                                            -- APOSTATE --
      if ak.apostate.setattacks then
				ak.apostate.setattacks()
			end
   elseif (gmcp.Char.Status.class == "Infernal" or gmcp.Char.Status.class == "Paladin" or gmcp.Char.Status.class == "Runewarden")  and not inlyre() then
			if ak.knight.setattacks then
				ak.knight.setattacks()
			end
   elseif gmcp.Char.Status.class == "Blademaster" and not inlyre() then   
      if ak.bm.setattacks then
				ak.bm.setattacks()
			end
   elseif gmcp.Char.Status.class == "Alchemist" and not inlyre() then
	    if ak.alchemist.setattacks then
				ak.alchemist.setattacks()
			end
   elseif gmcp.Char.Status.class == "Jester" and not inlyre() then
      if ak.stack == "JesterNoFash" and ak.jester.NoFashion then
         ak.jester.NoFashion()
      end
   elseif gmcp.Char.Status.class == "Depthswalker" and not inlyre() then
      if ak.depthswalker.setattacks then
				ak.depthswalker.setattacks()
			end
   elseif gmcp.Char.Status.class == "Sylvan" and not inlyre() then
      if ak.stack == "Weathering" and ak.sylvan.Weather then
         ak.sylvan.Weather()
      end
   elseif gmcp.Char.Status.class == "Psion" and not inlyre() then
			if ak.psion.setattacks then
         ak.psion.setattacks()
      end
   elseif gmcp.Char.Status.class == "Bard" and not inlyre() then
      if ak.stack == "Kelp" and ak.bard.KelpLock and ak.bard.KelpLock.Main then
         ak.bard.KelpLock.Main()
			elseif ak.stack == "Mentals" and ak.bard.Mentals and ak.bard.Mentals.Main then
			   ak.bard.Mentals.Main()
      end
	 elseif gmcp.Char.Status.class == "fire Elemental Lord" and not inlyre() then
	 	  if ak.ignition.setattacks then
         ak.ignition.setattacks()
			end
   elseif gmcp.Char.Status.class == "air Elemental Lord" and not inlyre() then
      if ak.stack == "Duress" and ak.duress and ak.duress.compress then
         ak.duress.compression()
      end
	 elseif gmcp.Char.Status.class == "water Elemental Lord" and not inlyre() then
      if ak.pervasion.setattacks then
        ak.pervasion.setattacks()
      end
   end
   if not inlyre() then
      ak.mycustomoffense()
   end
	 if ak.reboundPop and ak.stack ~= "NoOne" and not inlyre() and not ak.tza then
	 	  ak.reboundPop() 
	 end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Rounding</name>
							<packageName></packageName>
							<script>function roundUp(number, places)
	return math.ceil(number * math.pow(10,places)) / math.pow(10,places)
end

function roundDown(number, places)
	return math.floor(number * math.pow(10,places)) / math.pow(10,places)
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Alias Setter</name>
							<packageName></packageName>
							<script>function ak.setalias(aliasname, changes)
	ak.aliases.lastsend[aliasname] = ak.aliases.lastsend[aliasname] or "unknown"
	ak.aliases[aliasname] = ak.aliases[aliasname] or "random"
	if ak.aliases[aliasname] == changes then return end
	if ak.aliases.lastsend[aliasname] == changes then return end
	--local check = string.split(changes, "parry")
		
	ak.aliases.lastsend[aliasname] = changes
	send("setalias "..aliasname.." "..changes, false)

end

local parrychecks = {
	["right leg"] = true,
}

function ak.parrycut(var)
	if not string.find(var,"parry") then
		return var
	end
	for k,v in pairs(parrychecks) do
		
	end
end

function ak.aliasreset()
	send("setalias oattackrl stand")
	send("setalias oattackll stand")
	send("setalias oattackra stand")
	send("setalias oattackla stand")
	send("setalias oattackh stand")
	send("setalias oattackt stand")
	send("setalias oattack stand")
	send("setalias oattacktwo stand")
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Queue Tracking</name>
							<packageName></packageName>
							<script>function ak.queuereset()
	if wsys then
		if wsys.bals.b and wsys.bals.e then
			ak.queue.eqbal = {}
			ak.queue.sent = {}
		end
	end
end


registerAnonymousEventHandler("got balance", "ak.queuereset")
registerAnonymousEventHandler("got equilibrium", "ak.queuereset")</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Default Stack Set</name>
							<packageName></packageName>
							<script>
if ak.defaultstack then return end --Delete Me From Personal Settings!

function ak.defaultstack()
   if gmcp.Char.Status.race:match("Dragon") then 
      ak.stack = "dragon" 
      affstrack.crushedherb = nil
   elseif gmcp.Char.Status.class == "Monk" then
      if ak.monk.toggleswap then
         ak.monk.toggleswap() 
      else
         ak.stack = "mindfuck"
      end
   elseif gmcp.Char.Status.class == "Magi" then
      ak.stack = "Dgmagi"
      --ak.stack = "Pmagi"
   elseif gmcp.Char.Status.class == "Serpent" then
      ak.stack = "Kelp"
   elseif gmcp.Char.Status.class == "Occultist" then
      ak.stack = "Unravel"
   elseif gmcp.Char.Status.class == "Jester" then
      ak.stack = "JesterNoFash"
   elseif gmcp.Char.Status.class == "Shaman" then 
      ak.stack = "Tzantza" 
   elseif gmcp.Char.Status.class == "Sylvan" then
      ak.stack = "Weathering"
   elseif gmcp.Char.Status.class == "Bard" then
      ak.stack = "Kelp"
   elseif gmcp.Char.Status.class == "Blademaster" then
      ak.stack = "BM Prep"
   elseif gmcp.Char.Status.class == "Priest" then
      ak.stack = "priesto"
   elseif gmcp.Char.Status.class == "Alchemist" then
      ak.stack = "alchbase"
	 elseif gmcp.Char.Status.class == "Apostate" then
	 		ak.stack = "Kelp"
   elseif gmcp.Char.Status.class == "Sentinel" then
      ak.stack = "Petrify"
   elseif gmcp.Char.Status.class == "Depthswalker" then
      ak.stack = "Damage"
   elseif gmcp.Char.Status.class == "Psion" then
      ak.stack = "PsiLock"			
	 elseif gmcp.Char.Status.class == "air Elemental Lord" then
	    ak.stack = "Duress"
	 elseif gmcp.Char.Status.class == "water Elemental Lord" then
	    ak.stack = "Perversion"
	 elseif gmcp.Char.Status.class == "fire ELemental Lord" then
	 	  ak.stack = "Ignition"
   elseif gmcp.Char.Status.class == "Infernal" or gmcp.Char.Status.class == "Paladin" or gmcp.Char.Status.class == "Runewarden" then   
      if gmcp and gmcp.Char and gmcp.Char.Vitals and gmcp.Char.Vitals.charstats[3] == "Spec: Dual Cutting" then
         if ak.dwcoffensetoggle then
            ak.dwcoffensetoggle()
         end
      elseif gmcp and gmcp.Char and gmcp.Char.Vitals and gmcp.Char.Vitals.charstats[3] and gmcp.Char.Vitals.charstats[3] == "Spec: Sword and Shield" then
         ak.stack = "Aboard"     --sword and board
      elseif gmcp and gmcp.Char and gmcp.Char.Vitals and gmcp.Char.Vitals.charstats[3] and gmcp.Char.Vitals.charstats[3] == "Spec: Two Handed" then
         ak.stack = "2hspeed" 
      elseif gmcp and gmcp.Char and gmcp.Char.Vitals and gmcp.Char.Vitals.charstats[3] and gmcp.Char.Vitals.charstats[3] == "Spec: Dual Blunt" then
         ak.stack = "dwb"
      end
   end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Anti Illusion</name>
							<packageName></packageName>
							<script>
if ak.ai then return end

function ak.ai()
	return false
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Flame on!</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.flameon(typer)
   if typer == "additive" and affstrack.score.dehydrate == 100 and affstrack.score.aflame + 100 &lt; 500 then
      affstrack.score.aflame = affstrack.score.aflame + 100      
   elseif typer == "additive" and affstrack.score.dehydrate == 100 then
      affstrack.score.aflame = 500
   elseif affstrack.score.aflame &lt; 100 then
      affstrack.score.aflame = 100
   end
   ak.scoreup(target)
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Bleed Update</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.bleedupdate(pushed)
	if gmcp.Char.Status.class == "Blademaster" then
		ak.bleeding = pushed -- More Bleeding
		ak.scoreup(target)
	else
		if ak.bleeding &lt; pushed and affstrack.score.haemophilia &gt; 0 then
			if ak.ProTrackingConfirmed and affstrack.score.haemophilia &lt; 100 then 
  	    ak.ProTrackingConfirmed("haemophilia") 
  	 	end
			ak.bleeding = pushed -- More Bleeding
		elseif ak.bleeding - pushed &gt; 100 then
			--ak.bleeding = pushed --Less Bleeding
			if ak.thoughtIhad and affstrack.score.haemophilia &gt; 0 and not ak.dontremovehaemo then
				ak.thoughtIhad("haemophilia")	
			end
		elseif ak.bleeding &gt; 100 and affstrack.score.haemophilia &gt; 0 and ak.ProTrackingConfirmed and affstrack.score.haemophilia &lt; 100 then 
			ak.ProTrackingConfirmed("haemophilia") 
		end	
	end
	ak.dontremovehaemo = false
end

if ak.bloodletbleed then return end
function ak.bloodletbleed()
	return 255
end

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>SnB Smash High</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.SnBSmashHighAff(currentstaby)
	local shAff = "dizziness"
	if affstrack.score.dizziness &lt; 100 and not table.contains(currentstaby,"dizziness") then
		 shAff = "dizziness"
	elseif affstrack.score.recklessness &lt; 100 and not table.contains(currentstaby,"recklessness") then
		 shAff = "recklessness"
	elseif affstrack.score.stupidity &lt; 100 and not table.contains(currentstaby,"stupidity") then
		 shAff = "stupidity"
	elseif affstrack.score.confusion &lt; 100 and not table.contains(currentstaby,"confusion") then
		shAff = "confusion"
	elseif affstrack.score.epilepsy &lt; 100 and not table.contains(currentstaby,"epilepsy") then
		 shAff = "epilepsy"
	end
	return shAff
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>New Person</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.playercheck(who)
	ak[who] = ak[who] or ak.newplayer()
end

function ak.newplayer()
	return { 
		defs = {
		},
		bals = {
			["salve"] = true,
		},
		affs = {
			["addiction"]      = 0,
			["aeon"]           = 0,
			["agoraphobia"]    = 0,
			["anorexia"]       = 0,
			["aflame"]         = 0,
			["amnesia"]        = 0,
			["armexpend"]      = 0,
			["airfist"]        = 0,
			["asthma"]         = 0,
			["bitten"]         = 0,
			["blind"]          = 0,
			["blackout"]       = 0,
			["blisters"]       = 0,
			["bound"]          = 0,
			["brand"]          = 0,
			["claustrophobia"] = 0,
			["clumsiness"]     = 0,
			["conflagrate"]    = 0,
			["confusion"]      = 0,
			["corruption"]     = 0,
			["crippledarm"]    = 0,
			["crippledleg"]    = 0,
			["crushedthroat"]  = 0,
			["darkshade"]      = 0,
			["deadening"]      = 0,
			["deaf"]           = 0,
			["dementia"]       = 0,
			["depression"]     = 0,
			["dehydrate"]      = 0,
			["disloyalty"]     = 0,
			["disrupt"]        = 0,
			["dizziness"]      = 0,
			["enlighten"]      = 0,
			["epilepsy"]       = 0,
			["frozen"]         = 0,
			["generosity"]     = 0,
			["haemophilia"]    = 0,
			["hallucinations"] = 0,
			["hamstring"]      = 0,
			["hierophant"]     = 0,
			["healthleech"]    = 0,
			["hellsight"]      = 0,
			["hypersomnia"]    = 0,
			["hypochondria"]   = 0,
			["hypothermia"]    = 0,
			["impaleslash"]    = 0,
			["impatience"]     = 0,
			["inquisition"]    = 0,
			["insomnia"]       = 0,
			["justice"]        = 0,
			["kola"]           = 0,
			["latched"]        = 0,
			["lethargy"]       = 0,
			["lovers"]         = 0,
			["loneliness"]     = 0,
			["masochism"]      = 0,
			["manaleech"]      = 0,
			["mindclamp"]      = 0,
			["nausea"]         = 0,
			["pacifism"]       = 0,
			["paralysis"]      = 0,
			["parasite"]       = 0,
			["paranoia"]       = 0,
			["prone"]          = 0,
			["recklessness"]   = 0,
			["retribution"]    = 0,
			["rixil"]          = 0,
			["scalded"]        = 0,
			["scytherus"]      = 0,
			["selarnia"]       = 0,
			["sensitivity"]    = 0,
			["shadowmadness"]  = 0,
			["shyness"]        = 0,
			["slime"]          = 0,
			["slickness"]      = 0,
			["tempslickness"]  = 0,
			["sleep"]          = 0,
			["stupidity"]      = 0,
			["surge"]          = 0,
			["transfixed"]     = 0,
			["timeflux"]       = 0,
			["timeloop"]       = 0,
			["weariness"]      = 0,
			["wrenchhead"]     = 0,
			["wrenchtorso"]     = 0,
			["whisperingmadness"] = 0,
			["vertigo"]        = 0,
			["vitiate"]        = 0,
			["voidfist"]       = 0,
			["voyria"]         = 0,
			["airdisrupt"]     = 0,
			["earthdisrupt"]   = 0,
			["firedisrupt"]    = 0,
			["spiritdisrupt"]  = 0,
			["waterdisrupt"]   = 0,
			["rightleg"]       = 0,
			["leftleg"]       = 0,
			["rightarm"]       = 0,
			["leftarm"]       = 0,
			["head"]       = 0,
			["torso"]       = 0,
			["tension"]     = 0,
			["pressure"]    = 0,
			["unweavingbody"] = 0,
			["unweavingmind"] = 0,
			["unweavingspirit"] = 0,
		}
	}
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Shikudo Alias Split</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.shikudo.AliasSplit(blah)
	ak.shikudo.AttackAlias = {}
	local checktable = blah
	local attacks = {"ruku","kuro", "hiru", "nervestrike","livestrike", "dart", "hiraku", "thrust", "needle"}
	for i = 1, #blah do
		if table.contains(attacks,blah[i]) then
			if blah[i+1] and blah[i+1] == "light" then
				table.insert(ak.shikudo.AttackAlias,"light")
			else
				table.insert(ak.shikudo.AttackAlias,"regular")
			end
		end
	end
end

function ak.shikudo.LimbBlock()
	ak.shikudo.AttackAlias = ak.shikudo.AttackAlias or {}
	if #ak.shikudo.AttackAlias &gt; 0 then
		if ak.shikudo.AttackAlias[1] == "light" then
			return true	
		end
		table.remove(ak.shikudo.AttackAlias,1)
	end
	return false
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Mount Look</name>
							<packageName></packageName>
							<script>
function ak.MountLook()
	enableTrigger("Look Prompt")
	if WhoHereTable and not table.contains(WhoHereTable,target) then return end
	ak.lookmountedupdate = true
	ak.mountedcheck = target
	if ak.lookmounted then killTrigger(ak.lookmounted) end
	if ak.lookmountedtwo then killTrigger(ak.lookmountedtwo) end
  if ak.lookmountedthree then killTrigger(ak.lookmountedthree) end
  if ak.lookmountedfour then killTrigger(ak.lookmountedfour) end
	ak.lookmounted = tempRegexTrigger(ak.mountedcheck.."(?: |.*)is here.",[[
		ak.MountLookUnMounted()
	]])
	ak.lookmountedtwo = tempRegexTrigger(ak.mountedcheck.."(?: |.*)flows ever onwards.",[[
		ak.MountLookUnMounted()
	]])
	ak.lookmountedthree = tempRegexTrigger(ak.mountedcheck.."(?: |.*)\'s imposing form looms.",[[
		ak.MountLookUnMounted()
	]])
  	ak.lookmountedfour = tempRegexTrigger(ak.mountedcheck.."(?: |.*)towers here, clad in skin of living stone.",[[
		ak.MountLookUnMounted()
	]])
end

function ak.MountLookPrompt()
	disableTrigger("Look Prompt")
	ak.GHLookPrompt()
	ak.submergedLookPrompt()
	ak.FloodLookPrompt()
  ak.distortionLookPrompt()
	if WhoHereTable and not table.contains(WhoHereTable,target) then return end
	if ak.mounted == ak.lookmountedupdate then return end
	ak.mounted = ak.lookmountedupdate
	if ak.lookmounted then killTrigger(ak.lookmounted) end
	if ak.lookmountedtwo then killTrigger(ak.lookmountedtwo) end
	if ak.lookmountedthree then killTrigger(ak.lookmountedthree) end
  if ak.lookmountedfour then killTrigger(ak.lookmountedfour) end
	ak.lookmounted = nil
	ak.lookmountedtwo = nil
	ak.lookmountedthree = nil
	ak.scoreup(target)
end

function ak.MountLookUnMounted()
	if ak.lookmounted then killTrigger(ak.lookmounted) end
	if ak.lookmountedtwo then killTrigger(ak.lookmountedtwo) end
	if ak.lookmountedthree then killTrigger(ak.lookmountedthree) end
  if ak.lookmountedfour then killTrigger(ak.lookmountedfour) end
	ak.lookmountedupdate = false
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Room Defs</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.RoomDefs()
	ak.lookghupdate = false
	ak.lookFloodupdate = false
	ak.looksubmergedupdate = false
  ak.lookdistortionupdate = false
	if ak.looksubmerged then killTrigger(ak.looksubmerged) end
	if ak.lookGH then killTrigger(ak.lookGH) end
	if ak.lookFlood then killTrigger(ak.lookFlood) end
  if ak.lookdistortion then killTrigger(ak.lookdistortion) end
	ak.lookGH = tempTrigger("Hands of rotting flesh and white bone push up from the ground.",[[
		ak.GhLookHanded()
	]])
	ak.lookFlood = tempTrigger("This area is unnaturally flooded with water.",[[
		ak.FloodLookHanded()
	]])	
	ak.looksubmerged = tempTrigger("This location is nearly completely submerged.",[[
		ak.submergedLookHanded()
	]])	
  ak.lookdistortion = tempTrigger("The surroundings are distorted, as if viewed through water.",[[
    ak.distortionLookHanded()
  ]])
end
function ak.GhLookHanded()
	killTrigger(ak.lookGH)
	ak.lookghupdate = true
end
function ak.FloodLookHanded()
	killTrigger(ak.lookFlood)
	ak.lookFloodupdate = true
end
function ak.submergedLookHanded()
	killTrigger(ak.looksubmerged)
	ak.looksubmergedupdate = true
end
function ak.distortionLookHanded()
  killTrigger(ak.lookdistortion)
  ak.lookdistortionupdate = true
end

function ak.GHLookPrompt()
	if ak.gravehands == ak.lookghupdate then return end
	ak.gravehands = ak.lookghupdate
	if ak.lookGH then killTrigger(ak.lookGH) end
	ak.lookGH = nil
	ak.scoreup(target)
end

function ak.FloodLookPrompt()
	if ak.flood == ak.lookFloodupdate then return end
	ak.flood = ak.lookFloodupdate
	if ak.lookFlood then killTrigger(ak.lookFlood) end
	ak.lookFlood = nil
	ak.scoreup(target)
end

function ak.submergedLookPrompt()
	if ak.submerged == ak.looksubmergedupdate then return end
	ak.submerged = ak.looksubmergedupdate
	if ak.looksubmerged then killTrigger(ak.looksubmerged) end
	ak.looksubmerged = nil
	ak.scoreup(target)
end

function ak.distortionLookPrompt()
	if ak.distortion == ak.lookdistortionupdate then return end
	ak.distortion = ak.lookdistortionupdate
	if ak.lookdistortion then killTrigger(ak.lookdistortion) end
	ak.lookdistortion = nil
	ak.scoreup(target)
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Stacks</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Dragon Stack Prep</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>DragonStack(Main)</name>
								<packageName></packageName>
								<script>--dragon default
ak = ak or {}
ak.dragon = ak.dragon or {}
ak.dragon.default = ak.dragon.default or {}
function ak.dragon.default.main()
	ak.dragon.default.venoms()
	ak.dragon.default.dragoncurser()
	ak.dragon.default.setalias() 
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>DragonStack(VenomPull)</name>
								<packageName></packageName>
								<script>function ak.dragon.default.venoms()
  vcombo = {}
  if math.random(100)&lt;50 then
    if affstrack.score.paralysis&lt;100 then
        table.insert(vcombo,"curare")
    elseif affstrack.score.crippledarm&lt;100 then
        table.insert(vcombo,"epteth")
    elseif affstrack.score.crippledleg&lt;100 then
        table.insert(vcombo,"epseth")
    elseif affstrack.score.stupidity&lt;100 then
        table.insert(vcombo,"aconite")
    elseif affstrack.score.sensitivity&lt;100 then
        table.insert(vcombo,"prefarar")
    end
  else
    if affstrack.score.stupidity&lt;100 then
        table.insert(vcombo,"aconite")
    elseif affstrack.score.dizziness&lt;100 then
        table.insert(vcombo,"larkspur")
    elseif affstrack.score.clumsiness&lt;100 then
        table.insert(vcombo,"xentio")
    elseif affstrack.score.sensitivity&lt;100 then
        table.insert(vcombo,"prefarar")
    elseif affstrack.score.paralysis&lt;100 then
        table.insert(vcombo,"curare")
    end
  end
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>DragonStack(CursePull)</name>
								<packageName></packageName>
								<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.dragon.default.dragoncurser() 
      if math.random(100)&lt;50 then
         if affstrack.score.paralysis&lt;100 and vcombo[1] ~= "curare" then
            dragoncurse = "paralysis"
         elseif affstrack.score.asthma&lt;100 and vcombo[1] ~= "kalmia" then
            dragoncurse = "asthma"
         elseif affstrack.score.sensitivity&lt;100 then
            dragoncurse = "sensitivity"
         elseif affstrack.score.impatience&lt;100 then
            dragoncurse = "impatience"
         end
      else
         if affstrack.score.asthma&lt;100 and vcombo[1] ~= "kalmia"  then
            dragoncurse = "asthma"
         elseif affstrack.score.impatience&lt;100 then
            dragoncurse = "impatience"
         elseif affstrack.score.sensitivity&lt;100 then
            dragoncurse = "stupidity"
         elseif affstrack.score.paralysis&lt;100 and vcombo[1] ~= "curare"  then
            dragoncurse = "paralysis"
         end
    
      end
   if affstrack.score.sensitivity&lt;100 and vcombo[1] == "prefarar" and affstrack.score.blind ~= 100 then dragoncurse = "sensitivity" end
end
</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>DragonStack(SetAlias)</name>
								<packageName></packageName>
								<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.dragon.default.setalias() 
	ak.setalias("oattackrl", PreAliasGeneral().."/wield shield/dragoncurse "..target.." "..dragoncurse.." 1/rend "..target.." right leg "..vcombo[1].."/breathgust "..target)
	ak.setalias("oattackll", PreAliasGeneral().."/wield shield/dragoncurse "..target.." "..dragoncurse.." 1/rend "..target.." left leg "..vcombo[1].."/breathgust "..target)
	ak.setalias("oattackra", PreAliasGeneral().."/wield shield/dragoncurse "..target.." "..dragoncurse.." 1/rend "..target.." right arm "..vcombo[1].."/breathgust "..target)
	ak.setalias("oattackla", PreAliasGeneral().."/wield shield/dragoncurse "..target.." "..dragoncurse.." 1/rend "..target.." left arm "..vcombo[1].."/breathgust "..target)
	ak.setalias("oattackt", PreAliasGeneral().."/wield shield/dragoncurse "..target.." "..dragoncurse.." 1/rend "..target.." torso "..vcombo[1].."/breathgust "..target)
	ak.setalias("oattackh", PreAliasGeneral().."/wield shield dirk/dragoncurse "..target.." "..dragoncurse.." 1/rend "..target.." head "..vcombo[1].."/breathgust "..target)
end</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
						<Script isActive="yes" isFolder="no">
							<name>ClassLock</name>
							<packageName></packageName>
							<script>function ak.dragonfied(affline)
	if not ak.dragonTarget then
		ak.dragonTarget = true
		ak.classlockadd()
		parsedclasscures = false
		ak.scoreup(target)
		cecho("\n&lt;cyan&gt;Target is &lt;yellow&gt;DTF")
	end
end

function ak.elementalfied(what)
	if not ak.elementalTarget then
		ak.elementalTarget = what
		ak.dragonTarget = false
		ak.classlockadd()
		parsedclasscures = false
		ak.scoreup(target)
		cecho("\n&lt;cyan&gt;Target is &lt;yellow&gt;DTF("..what..")")
	end
end

function ak.classlockadd()
   if ndba and wsys then
      ak.classlockwsys()
   elseif svo and ndb then
      ak.classlocksvo()
	 else 
	    classlock = {}
      table.insert( classlock, "voyria" )
      table.insert( classlock, "weariness" )
      table.insert( classlock, "reckless" )
   end
end

function ak.classlockwsys()
 classlock = {}
 if ak.elementalTarget then
 	if ak.elementalTarget == "Earth" then
		table.insert( classlock, "weariness" )	
	elseif ak.elementalTarget == "Air" then
		table.insert( classlock, "voyria" )	
	elseif ak.elementalTarget == "Water" then
		table.insert( classlock, "weariness" )		
	elseif ak.elementalTarget == "Fire" then
		table.insert( classlock, "weariness" )
	end 
 elseif ak.dragonTarget then
   table.insert( classlock, "weariness" )
   table.insert( classlock, "recklessness" )
 elseif ndba.isperson(target) and ndba.getclass(target) ~= "unknown" then
   if ndba.getclass(target) == "Alchemist" then    --
      table.insert( classlock, "stupidity" )
   elseif ndba.getclass(target) == "Apostate" then --
      table.insert( classlock, "voyria")
   elseif ndba.getclass(target) == "Bard" then
      table.insert( classlock, "voyria" )
	 elseif ndba.getclass(target) == "Blademaster" then
      table.insert( classlock, "paralysis" )
      table.insert( classlock, "weariness" )
		  table.insert( classlock, "prone" )
   elseif ndba.getclass(target) == "Druid" then    --
      table.insert( classlock, "weariness" )
		  table.insert( classlock, "prone" )
   elseif ndba.getclass(target) == "Infernal" then
      table.insert( classlock, "weariness" )
   elseif ndba.getclass(target) == "Jester" then   --
      table.insert( classlock, "voyria" )
   elseif ndba.getclass(target) == "Magi" then
      table.insert( classlock, "haemophilia" )
   elseif ndba.getclass(target) == "Monk" then
      table.insert( classlock, "weariness" )
   elseif ndba.getclass(target) == "Occultist" then   --
      table.insert( classlock, "paralysis" )
      table.insert( classlock, "voyria" )
   elseif ndba.getclass(target) == "Paladin" then  
      table.insert( classlock, "weariness" )
      table.insert( classlock, "voyria" )
   elseif ndba.getclass(target) == "Priest" then   --
      table.insert( classlock, "weariness" )
      table.insert( classlock, "voyria" )
   elseif ndba.getclass(target) == "Runewarden" then
      table.insert( classlock, "weariness" )
      table.insert( classlock, "voyria")
   elseif ndba.getclass(target) == "Sentinel" then   
      table.insert( classlock, "weariness" )
		  table.insert( classlock, "prone" )
   elseif ndba.getclass(target) == "Serpent" then   
      table.insert( classlock, "weariness" )
   elseif ndba.getclass(target) == "Shaman" then   --
      table.insert( classlock, "selarnia" )
   elseif ndba.getclass(target) == "Sylvan" then   --
      table.insert( classlock, "voyria" )
   elseif ndba.getclass(target) == "Depthswalker" then   --
      table.insert( classlock, "recklessness" )
   elseif ndba.getclass(target) == "Psion" then   --
      table.insert( classlock, "confusion" )
   end
 else
    table.insert( classlock, "voyria" )
    table.insert( classlock, "weariness" )
    table.insert( classlock, "reckless" )
 end
end

function ak.classlocksvo()
 classlock = {}
 if ak.dragonTarget then
   table.insert( classlock, "weariness" )
   table.insert( classlock, "recklessness" )
 elseif ndb.isperson(target) and ndb.getclass(target) ~= "unknown" then
   if ndb.getclass(target) == "Alchemist" then    --
      table.insert( classlock, "stupidity" )
   elseif ndb.getclass(target) == "Apostate" then --
      table.insert( classlock, "voyria")
   elseif ndb.getclass(target) == "Bard" then
      table.insert( classlock, "voyria" )
	 elseif ndb.getclass(target) == "Blademaster" then
      table.insert( classlock, "weariness" )
		  table.insert( classlock, "prone" )
   elseif ndb.getclass(target) == "Druid" then    --
      table.insert( classlock, "weariness" )
		  table.insert( classlock, "prone" )
   elseif ndb.getclass(target) == "Infernal" then
      table.insert( classlock, "weariness" )
   elseif ndb.getclass(target) == "Jester" then   --
      table.insert( classlock, "voyria" )
   elseif ndb.getclass(target) == "Magi" then
      table.insert( classlock, "haemophilia" )
   elseif ndb.getclass(target) == "Monk" then
      table.insert( classlock, "weariness" )
   elseif ndb.getclass(target) == "Occultist" then   --
      table.insert( classlock, "paralysis" )
      table.insert( classlock, "voyria" )
   elseif ndb.getclass(target) == "Paladin" then  
      table.insert( classlock, "weariness" )
      table.insert( classlock, "voyria" )
   elseif ndb.getclass(target) == "Priest" then   --
      table.insert( classlock, "voyria" )
   elseif ndb.getclass(target) == "Runewarden" then
      table.insert( classlock, "weariness" )
      table.insert( classlock, "voyria")
   elseif ndb.getclass(target) == "Sentinel" then   
      table.insert( classlock, "weariness" )
		  table.insert( classlock, "prone" )
   elseif ndb.getclass(target) == "Serpent" then   
      table.insert( classlock, "weariness" )
   elseif ndb.getclass(target) == "Shaman" then   --
      table.insert( classlock, "selarnia" )
   elseif ndb.getclass(target) == "Sylvan" then   --
      table.insert( classlock, "voyria" )
   elseif ndb.getclass(target) == "Depthswalker" then   --
      table.insert( classlock, "recklessness" )
   end
 else
    table.insert( classlock, "voyria" )
    table.insert( classlock, "weariness" )
    table.insert( classlock, "reckless" )
 end
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Displays</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>odisplay</name>
							<packageName></packageName>
							<script>if ak.refreshAffs then return end           --DELETE THIS SHIT OUT OF YOUR PERSONAL VARS
ak = ak or {}

function ak.refreshAffs()
   if GUI and GUI.ak then
      GUI.ak()                              
   else
      ak.refreshAffsOLD()
   end

end

function ak.refreshAffsOLD()                               --This is my standard display included
        WindowWidth = 0;
        WindowHeight = 0;
        WindowWidth, WindowHeight = getMainWindowSize()
        moveWindow("aff_display", WindowWidth-190,WindowHeight-900)
        resizeWindow("aff_display", 175,890)
        clearWindow("aff_display")
        if ak.defs.rebounding then         
					cecho("aff_display","\nRebounding: &lt;red&gt;YES!\n")
        else 
					cecho("aff_display","\nRebounding: &lt;yellow&gt;NONE!\n")
        end
        if ak.defs.shield then 
        	cecho("aff_display","\nShielding: &lt;red&gt;YES!\n")
        else 
					cecho("aff_display","\nShielding: &lt;yellow&gt;NONE!\n")
        end
        if ak.defs.curseward then 
        	cecho("aff_display","\nWarding: &lt;red&gt;YES!\n")
        else 
					cecho("aff_display","\nWarding: &lt;yellow&gt;NONE!\n")
        end
        if swiftcount then 
             if swiftcount == 1 then 
                  cecho("aff_display","\nSwifting: &lt;red&gt;FALLING!\n\n")
             else 
                  cecho("aff_display","\nSwifting: &lt;yellow&gt;"..swiftcount.."!\n\n")
             end 
        end
        if vodun and vodun[target] and vodun[target]["fashions"] ~= nil then
           cecho("aff_display","0Fashions:&lt;orange_red&gt;"..vodun[target]["fashions"].."\n\n")
        end
        if ak.stack then echo("aff_display","Stacking:"..ak.stack.."\n") else echo("aff_display","\nStacking: NONE!\n\n") end
        targetrelay()
        echo("aff_display","\n0Afflictions:       \n\n")
        for k,v in pairs(affstrack.score) do
        if v &gt; 1 then
           echo("aff_display", k.." "..v.."\n")
           end
        end
        if affstrack.kelpscore &gt; .1 then    echo("aff_display","\nKelp:        "..affstrack.kelpscore.."|4\n") end
        if affstrack.ginsengscore &gt; .1 then echo("aff_display","Ginseng:     "..affstrack.ginsengscore.."|5\n") end
        if affstrack.goldenscore &gt; .1 then  echo("aff_display","Goldenseal:  "..affstrack.goldenscore.."|5\n") end
        if affstrack.mentalscore &gt; .1 then  echo("aff_display","Mentals:  "..affstrack.mentalscore.."|4\n") end
        if softscore then if softscore &gt;= 3 then cecho("aff_display", "Locks:\n SOFT LOCKED!") end end
        if truescore then if truescore &gt;= 5 then cecho("aff_display", "TRUE LOCKED!") end end
        ak.limbshow()
end

function ak.noDisplay()
        WindowWidth = 0;
        WindowHeight = 0;
        WindowWidth, WindowHeight = getMainWindowSize()
        moveWindow("aff_display", 0,0)
        resizeWindow("aff_display", 0,0)
        clearWindow("aff_display")
end


function init()
        winX, winY = getMainWindowSize()
        createMiniConsole("aff_display", winX-145,0,130,400)
        setBackgroundColor("aff_display", 150, 150, 150, 255)
        setMiniConsoleFontSize( "aff_display", 10 )
        setFgColor("aff_display", 10, 0, 0)
        setBgColor("aff_display", 150, 150, 150)
--ak.refreshAffs()
end


</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Oprompt Colour</name>
							<packageName></packageName>
							<script>--ColorPrompt

local convert = {

                ["addiction"]      = "add",
                ["agoraphobia"]    = "agor",
                ["anorexia"]       = "anor",
                ["aeon"]           = "aeon",
								["amnesia"]        = "amn",
                ["aflame"]         = "aflame",
                ["airfist"]        = "afist",
                ["asthma"]         = "ast",
                ["blind"]          = "bld",
								["blisters"]       = "bls",
                ["blackout"]       = "blko",
                ["bound"]          = "bound",
								["brand"]          = "brnd",
                ["claustrophobia"] = "claus",
                ["clumsiness"]     = "clum",
                ["conflagrate"]    = "cnflg",
                ["confusion"]      = "conf",
								["corruption"]     = "corr",
                ["crippledarm"]    = "carm",
                ["crippledleg"]    = "cleg",
						    ["crushedthroat"]  = "cthroat",
                ["darkshade"]      = "dark",
                ["deadening"]      = "dead",
                ["depression"]     = "deep",
                ["deaf"]           = "deaf",
                ["dehydrate"]      = "dehy",
                ["dementia"]       = "dem",
                ["disloyalty"]     = "dloyal",
                ["disrupt"]        = "dis",
                ["dizziness"]      = "diz",
                ["epilepsy"]       = "epi",
                ["enlighten"]      = "LIT",
                ["frozen"]         = "frzn",
                ["generosity"]     = "genor",
                ["guilt"]          = "gul",
                ["haemophilia"]    = "haem",
                ["hallucinations"] = "hall",
                ["hamstring"]      = "hamst",
                ["healthleech"]    = "hleach",
                ["hellsight"]      = "hsight",
                ["hierophant"]     = "hiero",
                ["hypersomnia"]    = "hyper",
                ["hypochondria"]   = "hypo",
                ["hypothermia"]    = "hypot",
                ["impaleslash"]    = "is",
                ["impatience"]     = "imp",
                ["inquisition"]    = "inq",
                ["justice"]        = "just",
                ["kola"]           = "kola",
                ["lethargy"]       = "leth",
                ["loneliness"]     = "lonl",
                ["masochism"]      = "maso",
                ["manaleech"]      = "mleach",
								["mindravaged"]    = "mrvg",
                ["nausea"]         = "naus",
                ["pacifism"]       = "pac",
                ["paralysis"]      = "para",
                ["parasite"]       = "paras",
                ["petrified"]      = "PETD",
                ["paranoia"]       = "prnd",
								["preempt"]        = "pree",
                ["prone"]          = "prn",
                ["recklessness"]   = "reck",
                ["retribution"]    = "ret",
                ["rixil"]          = "rixil",
                ["scalded"]        = "scald",
                ["scytherus"]      = "scy",
                ["selarnia"]       = "sel",
                ["sensitivity"]    = "sen",
                ["slime"]          = "slm",
                ["shadowmadness"]  = "smad",
                ["shyness"]        = "shy",
                ["slickness"]      = "slick",
                ["spiritburn"]     = "sburn",
								["stuttering"]     = "stut",
                ["surge"]          = "surge",
                ["tempslickness"]  = "slick2",
								["tension"]        = "ten",
                ["stupidity"]      = "stu",
                ["tenderskin"]     = "tskin",
                ["transfixed"]     = "trans",
                ["timeflux"]       = "tfx",
                ["timeloop"]       = "tloop",
                ["trussed"]        = "trst",
                ["unconscious"]    = "uncon",
                ["weariness"]      = "weari",
                ["whisperingmadness"] = "wmad",
                ["wrenchhead"]     = "wrth",
                ["wrenchtorso"]     = "wrtt",
                ["worm"]           = "wrm",
                ["vertigo"]        = "vert",
                ["vitiate"]        = "vit",
                ["voyria"]         = "voyria",
                ["voidfist"]       = "vfist",
                ["rightleg"]       = "rl",
                ["leftleg"]       = "ll",
                ["rightarm"]       = "ra",
                ["leftarm"]       = "la",
                ["head"]       = "h",
                ["torso"]       = "tt",
                ["trussed"]        = "trsd",
                ["unconscious"]    = "unc",  
                ["airdisrupt"]  = "adsr",
                ["earthdisrupt"]  = "edsr",
                ["firedisrupt"]  = "fdsr",
                ["spiritdisrupt"]  = "sdsr",
                ["waterdisrupt"]  = "wdsr",
								["unweavingmind"] = "umind",
								["unweavingbody"] = "ubody",
								["unweavingspirit"] = "uspirit",
								["bloodfire"]     = "bfire",
}
ak.prompt = ak.prompt or {}
--if ak.prompt.unique then return end
ak.prompt.uniqueset = {"hallucinations","dizziness","recklessness","confusion","paranoia","epilepsy","impatience"}
ak.prompt.uniquesymbol = "&lt;cyan&gt;+"
ak.prompt.donotrelay = {"rixil","slime","hierophant"}
ak.prompt.currentcolor = "&lt;yellow&gt;"
ak.prompt.enablecolor = true
ak.prompt.lockgroup = true
ak.prompt.default = "&lt;yellow&gt;"
ak.prompt.colours = {}
ak.prompt.lockpriority = { 
  [1] = "PTLOCK",
  [2] = "HLOCK",
  [3] = "SLOCK",
  [4] = "VLOCK",
}
ak.prompt.locks = {
  PTLOCK = {"anorexia","asthma","slickness","paralysis","impatience"},
  HLOCK = {"anorexia","asthma","slickness","paralysis"},
  SLOCK = {"anorexia","asthma","slickness","impatience"},
  VLOCK = {"anorexia","asthma","slickness"},
}
ak.prompt.colours.lock = {
  PTLOCK = "&lt;deep_pink&gt;",
  HLOCK = "&lt;deep_pink&gt;",
  SLOCK = "&lt;hot_pink&gt;",
  VLOCK = "&lt;hot_pink&gt;",
}
ak.prompt.colours.specific = {
   Kelp = "&lt;green&gt;",
   Goldenseal = "&lt;white&gt;",
   Ginseng = "&lt;blue&gt;",
   Salve = "&lt;cyan&gt;", 
   Ash = "&lt;purple&gt;",
   Deathly = "&lt;cyan&gt;",
	 Smoke = "&lt;orange&gt;",
   }
ak.prompt.colours.afflictions = {
   Kelp = {"asthma", "clumsiness", "hypochondria", "sensitivity", "weariness", "healthleech"},      
   Goldenseal = {"dizziness", "epilepsy", "impatience", "shyness", "stupidity", "unweavingmind"},
   Ginseng = {"addiction", "darkshade", "haemophilia", "lethargy", "nausea", "scytherus", "unweavingbody"},
   Salve = {"aflame", "rightleg", "leftleg", "rightarm", "leftarm", "head", "torso"}, 
   Ash = {"confusion", "dementia", "hallucinations", "hypersomnia", "paranoia"} ,
   Deathly = {"enlighten","voyria"},
	 Smoke = {"tension","manaleech","deadening","disloyalty", "unweavingspirit"}, 
}
function ak.prompt.unique(aff)
   if table.contains(ak.prompt.uniqueset, aff) then
      return ak.prompt.uniquesymbol..""..ak.prompt.currentcolor
   else
      return ""
   end
end

function ak.prompt.setassign()
   if gmcp.Char.Status.class == "Bard" then
      ak.prompt.uniqueset = {"agoraphobia","claustrophobia","dementia","epilepsy","masochism","recklessness","vertigo","confusion", "dizziness", "impatience", "paranoia", "stupidity", "addiction"}
   elseif gmcp.Char.Status.class == "Sentinel" then
      ak.prompt.uniqueset = {"hallucinations","dizziness","recklessness","confusion","paranoia","epilepsy","impatience"}
   elseif gmcp.Char.Status.class == "Occultist" then
      ak.prompt.uniqueset = {"dementia","stupidity","confusion","hypersomnia","paranoia","hallucinations","impatience","recklessness","masochism","agoraphobia","loneliness","lovers"}   
   else
      ak.prompt.uniqueset = {}
   end
end
function ak.prompt.scoreup()
  ak.prompt.setassign()
  ak.prompt.donotgroup = {}
  ak.prompt.lockconflict = false
  ak.prompt.currentcolor = ak.prompt.default
  promptset = {}
  local donotreprompt = {}
  if ak.prompt.lockgroup then
     for i = 1, #ak.prompt.lockpriority do
        for x = 1, #ak.prompt.locks[ak.prompt.lockpriority[i]] do
           if affstrack.score[ak.prompt.locks[ak.prompt.lockpriority[i]][x]] &gt; 50 and not ak.prompt.lockconflict then
              if x == #ak.prompt.locks[ak.prompt.lockpriority[i]] and not table.contains(ak.prompt.donotgroup, ak.prompt.lockpriority[i]) then
                 if table.contains(ak.prompt.colours.lock, ak.prompt.lockpriority[i] ) then
                    table.insert(promptset, ak.prompt.colours.lock[ak.prompt.lockpriority[i]]..""..ak.prompt.lockpriority[i])
                    ak.prompt.lockconflict = true
                 else
                    table.insert(promptset, ak.prompt.lockpriority[i])
                    ak.prompt.lockconflict = true
                 end
                 for m = 1, #ak.prompt.locks[ak.prompt.lockpriority[i]] do
                    table.insert(donotreprompt, ak.prompt.locks[ak.prompt.lockpriority[i]][m])
                 end   
              end
           elseif not table.contains(ak.prompt.donotgroup, ak.prompt.lockpriority[i]) then
              table.insert(ak.prompt.donotgroup, ak.prompt.lockpriority[i])
           end
        end
     end
  end
  if ak.prompt.enablecolor then
     for k,v in pairs(ak.prompt.colours.afflictions) do
        if #ak.prompt.colours.afflictions[k] &gt; 0 then
           for i = 1,#ak.prompt.colours.afflictions[k] do
              if affstrack.score[ak.prompt.colours.afflictions[k][i]] &gt; 1 and convert[ak.prompt.colours.afflictions[k][i]] and not table.contains(ak.prompt.donotrelay, ak.prompt.colours.afflictions[k][i]) and not table.contains(donotreprompt, ak.prompt.colours.afflictions[k][i]) then         
                 if affstrack.score[ak.prompt.colours.afflictions[k][i]] == 100 and convert[ak.prompt.colours.afflictions[k][i]] then
                    ak.prompt.currentcolor = ak.prompt.colours.specific[k]
                    table.insert(promptset, ak.prompt.colours.specific[k]..""..ak.prompt.unique(ak.prompt.colours.afflictions[k][i])..""..convert[ak.prompt.colours.afflictions[k][i]])
                    table.insert(donotreprompt, ak.prompt.colours.afflictions[k][i])
                 elseif convert[ak.prompt.colours.afflictions[k][i]] then
                    ak.prompt.currentcolor = ak.prompt.colours.specific[k]
                    table.insert(promptset, ak.prompt.colours.specific[k]..""..ak.prompt.unique(ak.prompt.colours.afflictions[k][i])..""..convert[ak.prompt.colours.afflictions[k][i]].."["..math.floor(affstrack.score[ak.prompt.colours.afflictions[k][i]] + 0.5).."]")
                    table.insert(donotreprompt, ak.prompt.colours.afflictions[k][i])
                 end
              end
           end
        end
     end
  end
  for k,v in pairs(affstrack.score) do
     if v &gt; 1 and convert[k] and not table.contains(donotreprompt, k)and not table.contains(ak.prompt.donotrelay, k) then         
        if v == 100 and convert[k] then
           ak.prompt.currentcolor = ak.prompt.default
           table.insert(promptset, ak.prompt.default..""..ak.prompt.unique(k)..""..convert[k])
        elseif convert[k] and not table.contains(ak.prompt.donotrelay, k)  then
           ak.prompt.currentcolor = ak.prompt.default
           table.insert(promptset, ak.prompt.default..""..ak.prompt.unique(k)..""..convert[k].."["..math.floor(v + 0.5).."]" )
        end
     end
  end
  if affstrack.impale then
     ak.prompt.currentcolor = ak.prompt.default
     table.insert(promptset, "&lt;cyan&gt;IMPALED")
  end
  if ak.track.flown then
     ak.prompt.currentcolor = ak.prompt.default
     table.insert(promptset, "&lt;white&gt;FLOWN")
  end
  if gmcp.Char.Status.class == "Infernal" or gmcp.Char.Status.class == "Paladin" or gmcp.Char.Status.class == "Runewarden" or gmcp.Char.Status.class == "Magi" or gmcp.Char.Status.class == "Serpent" or gmcp.Char.Status.class == "Bard" then
		if ak.defs.rebounding then
			table.insert(promptset,"&lt;blue&gt;Reb")
		end
		if affstrack.ferocity and affstrack.ferocity &gt; 0 then
		   table.insert(promptset,"&lt;cyan&gt;[&lt;red&gt;"..affstrack.ferocity.."&lt;cyan&gt;]")	
		end
  end
	if gmcp.Char.Status.class == "Occultist" then
		if ak.occie.aura.mental &gt; 0 or ak.occie.aura.physical &gt; 0 then
			table.insert(promptset,"&lt;cyan&gt;[&lt;white&gt;"..ak.occie.aura.physical.."/&lt;green&gt;"..ak.occie.aura.mental.."&lt;cyan&gt;]")
		end
  end
	if gmcp.Char.Status.class == "Depthswalker" then
    local age = ak.age or 0
    if age ~= 0 then
	   table.insert(promptset,"&lt;white&gt;[&lt;red&gt;"..ak.age().."&lt;white&gt;]")	
    end
	end	
	if ak.bleeding and ak.bleeding &gt; 0 then
	   table.insert(promptset,"&lt;cyan&gt;[&lt;red&gt;"..ak.bleeding.."&lt;cyan&gt;]")
	end
	if gmcp.Char.Status.class == "Shaman" and ak.shaman.GetFashions then
	   table.insert(promptset,"&lt;cyan&gt;[&lt;red&gt;F&lt;cyan&gt;]")	
	end
end




</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>oprompt Svo Script</name>
							<packageName></packageName>
							<script>--svo prompt
-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
--Mine Below!
--Without The Display!
--vconfig customprompt ^1H: @health ^W(^1@%health%^W), ^2M: @mana ^W(^2@%mana%^W) ^4@willpowerw, ^5@endurancee ^W@%xp% @eqbal|@defs@affs^W @ml_prompttagmine[@gametargethp]-
--With The Display!
--vconfig customprompt ^1H: @health ^W(^1@%health%^W), ^2M: @mana ^W(^2@%mana%^W) ^4@willpowerw, ^5@endurancee ^W@%xp% @eqbal|@defs@affs^W @ml_prompttagmine[@gametargethp]^y@ml_oprompt-

--Add @ml_oprompt to your custom svo prompt
--Use ^y@ml_oprompt instead for it to be coloured yellow


function ak.ml_oprompt()
  promptset = promptset or {}
  if not target then 
     return "" 
  elseif #promptset &gt; 0 then
     return ("["..table.concat(promptset, ", ").."]")
  else
     return ""
  end
end

function ak.svoEventHandlers()
   svo.adddefinition("@ml_oprompt", "ak.ml_oprompt()")
end
 
registerAnonymousEventHandler("svo system loaded", "ak.svoEventHandlers")


</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>oprompt Wys Script</name>
							<packageName></packageName>
							<script>--wsys.prompt
-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
--type wshow display
--add @owysprompt into your prompt
wsys  = wsys or {}
wsys.prompttags = wsys.prompttags or {}
function wsys.prompttags.owysprompt()
  promptset = promptset or {}
  if not target then 
     return "" 
  elseif #promptset &gt; 0 and not ak.disableAllEchos then
     return (ak.prompt.default.."["..table.concat(promptset, ", ").."&lt;yellow&gt;]")
  else
     return ""
  end
end
                    



</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>oecho</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------

function ak.echogain(string)
   if gmcp.Char.Name.name == "Klendathu" and not ak.disableAllEchos then  
      cecho("  &lt;cyan&gt;GAINED AFF:&lt;white&gt; "..string.."&lt;reset&gt;") 
   elseif not ak.disableAllEchos then 
      EchoForAddedAff(string)
   end
end

function ak.echolost(string)
   if gmcp.Char.Name.name == "Klendathu" and not ak.disableAllEchos then 
      cecho("  &lt;cyan&gt;GAINED AFF:&lt;white&gt; "..string.."&lt;reset&gt;")
   elseif not ak.disableAllEchos then
      EchoForLostAff(string) 
   end
end

function ak.echoForPossibleCures(string)
   if gmcp.Char.Name.name == "Klendathu" and not ak.disableAllEchos then 
      cecho("  &lt;cyan&gt;AFF PROCESSED:&lt;white&gt; "..string.."&lt;reset&gt;")
   elseif not ak.disableAllEchos then
      EchoForPossibleCures(string) 
   end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>oTarget</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function targetrelay ()
				if not target then return end
        cecho("aff_display","\n&lt;blue&gt;****************\n")
        cecho("aff_display","\n0Targets: "..target.."\n\n")
        if target1 ~= nil then cecho("aff_display","\nTarget1:&lt;yellow&gt; "..target1.."\n\n") end
        if target2 ~= nil then cecho("aff_display","Target2:&lt;yellow&gt; "..target2.."\n\n") end
        if target3 ~= nil then cecho("aff_display","Target3:&lt;yellow&gt; "..target3.."\n\n") end
        cecho("aff_display","\n&lt;blue&gt;****************\n")
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Limbs</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Limb Hit +</name>
							<packageName></packageName>
							<script>--limbs2
ak.limbs = ak.limbs or {}
ak.limbs.test = ak.limbs.test or {}
ak.limbs.weaponry = ak.limbs.weaponry or {}
ak.limbs.parriedlimbs = ak.limbs.parriedlimbs or {}
ak.limbs.weaponry.magi = {"earthstaff","airstaff","firestaff","waterstaff"}
ak.limbs.currentbreak = ak.limbs.currentbreak or {}
ak.limbs.currentbreak.weapon = {}
ak.limbs.currentbreak.limb = {}
ak.limbs.currentbreak.attacker = {}
ak.limbs.currentbreak.augment = {}
ak.limbs.currentbreak.who = {}
ak.limbs.blademaster = ak.limbs.blademaster or {}
ak.limbs.blademaster.stance = ak.limbs.blademaster.stance or {}
ak.limbs.tekura = ak.limbs.tekura or {}
ak.limbs.shikudo = ak.limbs.shikudo or {}
ak.limbs.twoh = ak.limbs.twoh or {}
ak.limbs.twoh.stance = ak.limbs.twoh.stance or {}


ak.limbs.LimbHit = ak.limbs.LimbHit or function(who, attacker, weapon, limb, augment, check)
   if who == "Me" then return end
   local whomaxhealth = ak.limbs.FindTargetHealth(who)
   local damage = 0
   ak.limbs.limb_table_check(who)
   ak.limbs.deleteset = false
   ak.limbs.tekura.dontbreaksethead = false
   local attackerclass = "unknown"
   if attacker == "Me" and gmcp.Char.Status.race:match("Dragon") then
      attackerclass = "Dragon" 
   elseif attacker == "Me" and gmcp.Char.Status.class then
      attackerclass = gmcp.Char.Status.class
   elseif ndba and ndba.isperson(attacker) then
      attackerclass = ndba.names[attacker]["class"]
   end 
   if weapon == "tremolo" then 
      damage = 50
   elseif who == "Me" and wsys and wsys.stats.h == wsys.stats.oh then 
      if wsys.absorbed == false then
         return 
      end
   elseif weapon == "dragonrend" then 
      damage = 25
	 elseif weapon == "psion" then
	 	  damage = 25
	 elseif weapon == "wreathed" then
      damage = 12.5
   elseif weapon == "viridianrend" then
      damage = 25			
   elseif weapon == "airstaff" then --15,9 for magi
      if whomaxhealth &gt; 5300 then
         damage = 10
      else
         damage = 11
      end  
      ak.staffaff(weapon)    
   elseif table.contains(ak.limbs.weaponry.magi, weapon) then
      if whomaxhealth &gt; 5400 then
         damage = 16
      else
         damage = 17
      end   
      ak.staffaff(weapon)      
   elseif ak.limbs.myweapons and ak.limbs.myweapons[weapon] then --ak.limbs.myweapons
      damage = ak.limbs.findMyStab(weapon,whomaxhealth)
	 elseif ak.limbs.myformulas and ak.limbs.myformulas[weapon] then
	 		damage = ak.limbs.myformulas[weapon](who, attacker, weapon, limb, augment, check)
   else
      return
   end
   ak.limbs.limbcount[who]["lastpercent"..limb] = ak.limbs.limbcount[who][limb] + 0
   ak.limbs.limbcount[who][limb] = ak.limbs.limbcount[who][limb] + damage
   if weapon == "axk" then
      ak.limbs.tekura.dontbreaksethead = true
   end
   if target == who then
      ak.limbs.damageEcho_Target(target,limb)
   else
      ak.limbs.damageEcho_Non_Target(who,limb)
   end
   ak.limbs.test.currentmax = currentmax
   ak.limbs.test.damage = damage
   ak.limbs.test.who = who
   ak.limbs.test.whomaxhealth = whomaxhealth
   ak.limbs.test.attacker = attacker
   ak.limbs.test.attackerclass = attackerclass
   ak.limbs.test.weapon = weapon
   ak.limbs.test.limb = limb
   ak.limbs.test.augment = augment
   ak.limbs.test.check = check
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>My Weapons +</name>
							<packageName></packageName>
							<script>--limbs db

function ak.limbs.findMyStab(weapon,whomaxhealth)
   if not ak.limbs.myweapons[weapon] then 
      cecho("error.1")
      return 
   end
   local currentmax = 0
   local damage = 0
   for k,v in pairs(ak.limbs.myweapons[weapon]) do
      if currentmax == 0 then 
         currentmax = k
      else
         if ak.limbs.isCloser(whomaxhealth, k, currentmax, weapon) then
            currentmax = k
         end
      end
   end
   ak.limbs.test.currentmax = currentmax
   damage = ak.limbs.myweapons[weapon][currentmax]
   return damage
end

function ak.limbs.isCloser(whomaxhealth, k, currentmax, weapon)
   ak.limbs.test.proximityK = whomaxhealth - k
   ak.limbs.test.proximityCurrent = whomaxhealth - currentmax
   if ak.limbs.test.proximityCurrent &lt; 0 then
      ak.limbs.test.proximityCurrent = ak.limbs.test.proximityCurrent * -1
   end
   if ak.limbs.test.proximityK &lt; 0 then
      ak.limbs.test.proximityK = ak.limbs.test.proximityK * -1
   end
   ak.limbs.test.k = k
   ak.limbs.test.currentmax = currentmax
   if ak.limbs.test.proximityK &lt; ak.limbs.test.proximityCurrent then
      return true
   else
      return false
   end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Misc Limb Functions</name>
							<packageName></packageName>
							<script>--limbs misc
function ak.limbs.FindTargetHealth(who)
   if who == "Me" then
      return gmcp.Char.Vitals.maxhp
   end
   ak.knownmaxhealth = ak.knownmaxhealth or {}
   if table.contains(ak.knownmaxhealth, who) then
      return tonumber(ak.knownmaxhealth[who]) 
   else
      return 6000   
   end
end

function ak.limbs.ariaUp(name)
	if not ak.knownmaxhealth[name] then return end
	ak.knownmaxhealth[name] = ak.knownmaxhealth[name] * 1.1
end

function ak.limbs.ariaDown(name)
	display(name)
	if not ak.knownmaxhealth[name] then return end
	ak.knownmaxhealth[name] = ak.knownmaxhealth[name] / 1.1	
end

function ak.limbs.standardizeLimb(limb)
   local limbsc = {
   ["right leg"] = "rightleg",
   ["right arm"] = "rightarm",
   ["left arm"] = "leftarm",
   ["left leg"] = "leftleg",
   }
   if limbsc[limb] then
      return limbsc[limb]
   else
      return limb
   end
end

function ak.limbs.ExpoundLimb(limb)
   local limbs = {
   ["rightleg"] = "right leg",
   ["rightarm"] = "right arm",
   ["leftarm"] = "left arm",
   ["leftleg"] = "left leg",
   }
   if limbs[limb] then
      return limbs[limb]
   else
      return limb
   end
end

function ak.limbs.limb_table_check(who)
   ak.limbs.limbcount = ak.limbs.limbcount or {}
   who = who or "Me"
   if not ak.limbs.limbcount[who] then
      ak.limbs.limb_table_form(who)
   end
end

function ak.limbs.limb_table_form(who)
 ak.limbs.limbcount[who] = ak.limbs.limbcount[who] or {}
 ak.limbs.limbcount[who].lasthitdamage = ak.limbs.limbcount[who].lasthitdamage or {} 
 ak.limbs.limbcount[who].lasthitlimb = ak.limbs.limbcount[who].lasthitlimb or "rightleg"   
 ak.limbs.limbcount[who].breakpoint = ak.limbs.limbcount[who].breakpoint or 0
 ak.limbs.limbcount[who].rightarm = ak.limbs.limbcount[who].rightarm or 0 
 ak.limbs.limbcount[who].rightleg = ak.limbs.limbcount[who].rightleg or 0 
 ak.limbs.limbcount[who].leftarm = ak.limbs.limbcount[who].leftarm or 0 
 ak.limbs.limbcount[who].leftleg = ak.limbs.limbcount[who].leftleg or 0 
 ak.limbs.limbcount[who].torso = ak.limbs.limbcount[who].torso or 0 
 ak.limbs.limbcount[who].head = ak.limbs.limbcount[who].head or 0
 ak.limbs.limbcount[who].lastpercentrightarm = ak.limbs.limbcount[who].lastpercentrightarm or 0 
 ak.limbs.limbcount[who].lastpercentrightleg = ak.limbs.limbcount[who].lastpercentrightleg or 0 
 ak.limbs.limbcount[who].lastpercentleftarm = ak.limbs.limbcount[who].lastpercentleftarm or 0 
 ak.limbs.limbcount[who].lastpercentleftleg = ak.limbs.limbcount[who].lastpercentleftleg or 0 
 ak.limbs.limbcount[who].lastpercenttorso = ak.limbs.limbcount[who].lastpercenttorso or 0 
 ak.limbs.limbcount[who].lastpercenthead = ak.limbs.limbcount[who].lastpercenthead or 0
 ak.limbs.limbcount[who].maxbreaks = {}

 ak.limbs.limbcount[who].maxbreaks.rightarm = 0 
 ak.limbs.limbcount[who].maxbreaks.rightleg = 0 
 ak.limbs.limbcount[who].maxbreaks.leftarm = 0 
 ak.limbs.limbcount[who].maxbreaks.leftleg = 0 
 ak.limbs.limbcount[who].maxbreaks.torso = 0 
 ak.limbs.limbcount[who].maxbreaks.head = 0
end


function ak.limbs.limbreset(who)
 ak.limbs.limbcount[who] = ak.limbs.limbcount[who] or {}
 ak.limbs.limbcount[who].lasthitdamage = {} 
 ak.limbs.limbcount[who].lasthitlimb =  "rightleg"   
 ak.limbs.limbcount[who].breakpoint = 0
 ak.limbs.limbcount[who].rightarm = 0 
 ak.limbs.limbcount[who].rightleg = 0 
 ak.limbs.limbcount[who].leftarm = 0 
 ak.limbs.limbcount[who].leftleg = 0 
 ak.limbs.limbcount[who].torso = 0 
 ak.limbs.limbcount[who].head = 0
 ak.limbs.limbcount[who].lastpercentrightarm = 0 
 ak.limbs.limbcount[who].lastpercentrightleg = 0 
 ak.limbs.limbcount[who].lastpercentleftarm = 0 
 ak.limbs.limbcount[who].lastpercentleftleg = 0 
 ak.limbs.limbcount[who].lastpercenttorso = 0
 ak.limbs.limbcount[who].lastpercenthead = 0
 ak.limbs.limbcount[who].maxbreaks = {}
 ak.limbs.limbcount[who].maxbreaks.rightarm = 0 
 ak.limbs.limbcount[who].maxbreaks.rightleg = 0 
 ak.limbs.limbcount[who].maxbreaks.leftarm = 0 
 ak.limbs.limbcount[who].maxbreaks.leftleg = 0 
 ak.limbs.limbcount[who].maxbreaks.torso = 0 
 ak.limbs.limbcount[who].maxbreaks.head = 0
end

ak.limbs.BreakerOrder = {"rightleg","leftleg","head","torso","rightarm","leftarm"}
function ak.limbs.breakOrder(limb)
	table.remove(ak.limbs.BreakerOrder,table.index_of(ak.limbs.BreakerOrder,limb))
	table.insert(ak.limbs.BreakerOrder,limb)
end

function ak.limbs.FindLastBrokenLeg()
	local tick = false
	for i = 1, #ak.limbs.BreakerOrder do
		if ak.limbs.BreakerOrder[i] == "rightleg" or ak.limbs.BreakerOrder[i] == "leftleg" then
			if not tick then
				tick = true
			else
				return ak.limbs.BreakerOrder[i]
			end
		end
	end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Limb Relays</name>
							<packageName></packageName>
							<script>--limb relays
function ak.limbs.damageEcho_Target(who,limb)       -----Reset Timer --ak.limbs.tekura.dontbreaksethead
  local hitsneeded = roundUp((100-ak.limbs.limbcount[who][limb])/(ak.limbs.limbcount[who][limb] - ak.limbs.limbcount[who]["lastpercent"..limb]),0)
--Limbs
  if (ak.limbs.limbcount[who][limb] &gt;= 100) and limb ~= "torso" and limb ~= "head" then
		 ak.limbs.limbcount[who].maxbreaks[limb] = ak.limbs.limbcount[who][limb]
     ak.limbs.limbcount[who][limb] = 0
     affstrack.score[limb] = 200
		 ak.limbs.lastbroke = limb
     cecho("&lt;green&gt;\n\nBroke "..who.."'s "..limb.."(A)!!")
		 ak.limbs.breakOrder(limb)
--Head
  elseif (ak.limbs.limbcount[who][limb] &gt;= 100) and not ak.limbs.tekura.dontbreaksethead then
		 ak.limbs.limbcount[who].maxbreaks[limb] = ak.limbs.limbcount[who][limb]
     ak.limbs.limbcount[who][limb] = 0
     affstrack.score[limb] = affstrack.score[limb] + 100
     if limb == "head" then affstrack.score.stupidity = 100 end
		 ak.limbs.lastbroke = limb
     cecho("&lt;green&gt;\n\nBroke "..who.."'s "..limb.."(B)!!")
		 ak.limbs.breakOrder(limb)
  elseif ak.limbs.tekura.dontbreaksethead then
     if ak.limbs.limbcount[who]["head"] &gt; 100 then
        affstrack.score["head"] = 200
        affstrack.score.stupidity = 100
     else
        ak.limbs.limbcount[who]["head"] = ak.limbs.limbcount[who]["lastpercenthead"]
        affstrack.score["head"] = affstrack.score["head"] + 100
        affstrack.score.stupidity = 100
     end
		 ak.limbs.lastbroke = limb
     cecho("&lt;green&gt;\n\nBroke "..who.."'s "..limb.."(AXK)!!")
		 ak.limbs.breakOrder(limb)
  end
  if affstrack.score.head &gt; 200 then affstrack.score.head = 200 end
  cecho("&lt;yellow&gt;\n"..who.."'s "..limb.." is at&lt;cyan&gt; "..roundUp(ak.limbs.limbcount[who][limb],0).."("..hitsneeded..")!!")
  if ak.limbs.ScoreRun then 
		ak.scoreup(target)
		--cecho("&lt;green&gt;Score!")
  end
  limbtimer = limbtimer or {}
  limbtimer[who] = limbtimer[who] or {}
  if limbtimer[who][limb] then killTimer(limbtimer[who][limb]) end
  if who == "Me" and limb == "torso" then
     limbtimer[who][limb] = tempTimer(180, [[ 
         ak.limbs.ignoretorso = false
         cecho("&lt;yellow&gt;\n\nReset ]]..who..[['s ]]..limb..[[!\n")
         ak.limbs.limbcount.]]..who..[[.]]..limb..[[ = 0
         ak.scoreup(target)
     ]])
  else
     limbtimer[who][limb] = tempTimer(180, [[ 
         cecho("&lt;yellow&gt;\n\nReset ]]..who..[['s ]]..limb..[[!\n")
         ak.limbs.limbcount.]]..who..[[.]]..limb..[[ = 0
         ak.scoreup(target)
     ]])
  end
end

function ak.limbs.damageEcho_Non_Target(who,limb) 
  donotrebreak = donotrebreak or {}
  donotrebreak[who] = donotrebreak[who] or {}
  limbtimer = limbtimer or {}
  limbtimer[who] = limbtimer[who] or {}
  local hitsneeded = roundUp((100-ak.limbs.limbcount[who][limb]) / (ak.limbs.limbcount[who][limb] - ak.limbs.limbcount[who]["lastpercent"..limb]),0)
  --local hitsneeded = roundUp(100 / (ak.limbs.limbcount[who][limb] - ak.limbs.limbcount[who]["lastpercent"..limb]),0)
--Limbs
  if ak.limbs.limbcount[who][limb] &gt;= 100 and limb ~= "torso" and limb ~= "head" then
     ak.limbs.limbcount[who][limb] = 0
     if who == "Me" or who == "You" then 
        cecho("&lt;green&gt;\n\nBroke my "..limb.."!!")			
		else
        cecho("&lt;green&gt;\n\nBroke "..who.."'s "..limb.."!!")
     end
     ak.limbs.damagedisable(who,limb)
--Head
  elseif ak.limbs.limbcount[who][limb] &gt;= 100 then
     ak.limbs.limbcount[who][limb] = 0
     if who == "Me" or who == "You" then 
        cecho("&lt;green&gt;\n\nBroke my "..limb.."!!")			
		else
        cecho("&lt;green&gt;\n\nBroke "..who.."'s "..limb.."!!")
     end
     if (who == "Me" or who == "You") and limb == "torso" and not ak.limbs.ignoretorso then
        wsys.affadd("mildtrauma")
				send("curing predict mildtrauma")
     end
     ak.limbs.damagedisable(who,limb)
  end
  if who == "Me" then
     if GUI and GUI.UpdateLimbs then GUI.UpdateLimbs() end
     cecho("&lt;yellow&gt;\nMy &lt;cyan&gt;"..limb.." is at&lt;cyan&gt; "..roundUp(ak.limbs.limbcount[who][limb],0).."("..hitsneeded..")!!")
     if ak.limbs.ScoreRun then ak.scoreup(target) end
     if limbtimer[who][limb] then 
			killTimer(limbtimer[who][limb]) 
		end
     limbtimer[who][limb] = tempTimer(180, [[ 
         cecho("&lt;yellow&gt;\n\nReset My ]]..limb..[[!\n")
         ak.limbs.limbcount.]]..who..[[.]]..limb..[[ = 0
         if GUI and GUI.UpdateLimbs then GUI.UpdateLimbs() end
         ak.scoreup(target)
     ]])
  else
     if limbtimer[who][limb] then 
			killTimer(limbtimer[who][limb]) 
		end
     limbtimer[who][limb] = tempTimer(180, [[ 
         cecho("&lt;yellow&gt;\n\nReset ]]..who..[['s ]]..limb..[[!\n")
         ak.limbs.limbcount.]]..who..[[.]]..limb..[[ = 0
         if ]]..who..[[ == target then ak.scoreup(target)end
     ]])
  end
end

function ak.limbs.damagedisable(who,limb)
   if limb == "aflame" or who == "Me" then
      return
   elseif _G[who..""..limb.."disablelimbdamage"] == nil then 
      _G[who..""..limb.."disablelimbdamage"] = tempTimer(4,[[
         _G["]]..who..[[]]..limb..[[disablelimbdamage"] = nil
         cecho("&lt;cyan&gt;\n\n\nCounting again for, &lt;yellow&gt;]]..who..[['s ]]..limb..[[!\n\n\n")
         ak.limbs.countAgain("]]..who..[[","]]..limb..[[")
         cecho("&lt;cyan&gt;\n\n\nCounting again for, &lt;yellow&gt;]]..who..[['s ]]..limb..[[!\n\n\n")
      ]])
   end
end

function ak.limbs.countAgain(who,limb) --Return From Timeout on Secondary Targets
   local remove = limb:gsub("%s+", "")
   remove = remove:lower()
end

function ak.limbs.CountAgain(limb) --Return from Apply Script
   ak.limbs.limb_table_check(target)
   if ak.limbs.limbcount[target] and ak.limbs.limbcount[target][limb] then 
      ak.limbs.limbcount[target][limb] = 0 
   end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Limb Display</name>
							<packageName></packageName>
							<script>--limbshow
function ak.limbshow()
   cecho("aff_display","\n&lt;blue&gt;****************\n")
   cecho("aff_display","\nLimbs:                \n")
   ak.limbs = ak.limbs or {}
   ak.limbs.limbcount = ak.limbs.limbcount or {}
   if ak.limbs.limbcount[target] ~= nil then
      cecho("aff_display","\n\nH+T  :&lt;yellow&gt;"..ak.limbs.limbcount[target].head.." "..ak.limbs.limbcount[target].torso.."      \n")
      cecho("aff_display","\n\nArms: &lt;yellow&gt;"..ak.limbs.limbcount[target].leftarm.." "..ak.limbs.limbcount[target].rightarm.."      \n")
      cecho("aff_display","\n\nLegs: &lt;yellow&gt;"..ak.limbs.limbcount[target].leftleg.." "..ak.limbs.limbcount[target].rightleg.."      ")
   end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Parse Hits</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.limbs.ParseonLine()
	if isActive("Confirmed Hit Limbs", "trigger") == 0 then return end
	ak.limbs.parseBreaks()
end



function ak.limbs.parseBreaks()
   cecho("&lt;cyan&gt;.")
   ak.limbs.ScoreRun = false
   disableTrigger("Missed Single Removal Limbs")                --DO NOT CHANGE!
   disableTrigger("Parry locate")
   disableTrigger("Monk Parry")
   local augment = "none"
   if #ak.limbs.currentbreak.weapon &gt; 0 then
      for i = 1, #ak.limbs.currentbreak.weapon do
         if ak.limbs.currentbreak.augment[i] then
            augment = ak.limbs.currentbreak.augment[i] 
         else
            augment = "none"
         end
         ak.limbs.LimbHit(ak.limbs.currentbreak.who[i], ak.limbs.currentbreak.attacker[i], ak.limbs.currentbreak.weapon[i], ak.limbs.currentbreak.limb[i], augment)
      end
   end
   ak.limbs.currentbreak.weapon = {}
   ak.limbs.currentbreak.limb = {}
   ak.limbs.currentbreak.attacker = {}
   ak.limbs.currentbreak.who = {}
   ak.limbs.currentbreak.augment = {}
   cecho("&lt;cyan&gt;.")
   ak.limbs.absorbed = false
end

function ak.limbs.parseBreaksPrompt()
   cecho("&lt;cyan&gt;.")
   ak.limbs.ScoreRun = true
   disableTrigger("Missed Single Removal Limbs")                --DO NOT CHANGE!
   disableTrigger("Confirmed Hit Limbs") 
   disableTrigger("Parry locate")
   disableTrigger("Monk Parry")
   local augment = "none"
   if #ak.limbs.currentbreak.weapon &gt; 0 then
      for i = 1, #ak.limbs.currentbreak.weapon do
         if ak.limbs.currentbreak.augment[i] then
            augment = ak.limbs.currentbreak.augment[i] 
         else
            augment = "none"
         end
         ak.limbs.LimbHit(ak.limbs.currentbreak.who[i], ak.limbs.currentbreak.attacker[i], ak.limbs.currentbreak.weapon[i], ak.limbs.currentbreak.limb[i], augment)
      end
   else
      ak.scoreup(target)
   end
   ak.limbs.currentbreak.weapon = {}
   ak.limbs.currentbreak.limb = {}
   ak.limbs.currentbreak.attacker = {}
   ak.limbs.currentbreak.who = {}
   ak.limbs.currentbreak.augment = {}
   cecho("&lt;pink&gt;*")
   ak.limbs.absorbed = false
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Clamp</name>
							<packageName></packageName>
							<script>ak.clampd = ak.clampd or {}
function ak.limbs.clampOn(who)
	if ak.knownmaxhealth[who] and not table.contains(ak.clampd,who) then
		cecho("\n\n&lt;cyan&gt;MIND CLAMP ON &lt;white&gt;"..who.."\n\n")
		ak.knownmaxhealth[who] = ak.knownmaxhealth[who] * .8
		table.insert(ak.clampd,who)
	end
	ak.scoreup(who)
end

function ak.limbs.clampOFF(who)
	if ak.knownmaxhealth[who] and table.contains(ak.clampd,who) then
		cecho("\n\n&lt;cyan&gt;LOST CLAMP ON &lt;white&gt;"..who.."\n\n")
		table.remove(ak.clampd,table.index_of(ak.clampd, who))
		ak.knownmaxhealth[who] = ak.knownmaxhealth[who] * 5/4
	end
	ak.scoreup(who)
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Cure Methods</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>oeaten</name>
							<packageName></packageName>
							<script>function ak.cure.ate(what,prorun)
	ak.occie.aura.parsereduct(what)
   local affs = {}
   ak.nexteatcheck(what)
   ak.mickey = false
   ak.randomaffs = ak.randomaffs or 0
   ocured = ocured or {}
   ocured.conversion[what] = ocured.conversion[what] or "notadded"
   ocured[ocured.conversion[what]] = {}
	 ak.eatsbetweenaffs = ak.eatsbetweenaffs + 1
   local affconfirmedcount = 0
   if affstrack.score.anorexia&gt;0 and not prorun then 
      if ak.thoughtIhad then ak.thoughtIhad("anorexia") else affstrack.score.anorexia = 0 end
      ocured = ocured or {}
      ocured[ocured.conversion[what]] = {}
   end
   if what == "hawthorn berry" or what == "calamine crystal" then
      affstrack.score.deaf = 100
      tempTimer(3,[[affstrack.score.deaf = 0;ak.scoreup(target)]])
   else
      for i = 1, #affstrack.eaten[what] do
         if affstrack.score[affstrack.eaten[what][i]] &gt; 0 then
            table.insert(affs, affstrack.eaten[what][i])
            affconfirmedcount = affconfirmedcount + affstrack.score[affstrack.eaten[what][i]]
         end
      end
      if #affs == 1 and affstrack.score[affs[1]] &lt; 100 and ak.randomaffs == 0 then
         if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end
         affstrack.score[affs[1]] = 0
				 ak.AfflictionCured(affs[1])
				 ak.ResetConfirmAff(affs[1])
      elseif #affs &gt; 1 and affconfirmedcount &lt;= 100 then
			   if #affs and table.contains(affs,"slickness") and affstrack.score.asthma == 100 then
				    ak.echoForPossibleCures(table.concat(affs, " ")) 
						--if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end
				 else
         	  if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end
				 end
         for i = 1, #affs do
            affstrack.score[affs[i]] = 0
						ak.AfflictionCured(affs[i])
         end
      elseif #affs &gt; 1 and table.contains(affs,"impatience") and ak.goldensealCount() &gt; 100 then
         ak.echoForPossibleCures(table.concat(affs, " "))
         for i = 1, #affs do            
            ocured = ocured or {}
            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}
            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]
            if affs[i] ~= "impatience" then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)
            end
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
                affstrack.score[affs[i]] = 0
								ak.AfflictionCured(affs[i])
            end
         end
      elseif #affs &gt; 1 and table.contains(affs,"asthma") and SmokeCount() &gt;= 100 then
         ak.echoForPossibleCures(table.concat(affs, " "))
         for i = 1, #affs do            
            ocured = ocured or {}
            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}
            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]
            if affs[i] ~= "asthma" then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)
            end
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
                affstrack.score[affs[i]] = 0
								ak.AfflictionCured(affs[i])
            end
         end
			
			elseif #affs &gt; 1 and table.contains(affs,"slickness") and affstrack.score.prone == 100 and ak.canstand() then
         ak.echoForPossibleCures(table.concat(affs, " "))
         for i = 1, #affs do            
            ocured = ocured or {}
            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}
            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]
            if affs[i] ~= "paralysis" then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)
            end
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
                affstrack.score[affs[i]] = 0
								ak.AfflictionCured(affs[i])
            end
         end
				 
		  elseif #affs == 1 and table.contains(affs,"slickness") and affstrack.score.asthma &gt; 0 and affstrack.score.asthma &lt; 100 then
         ak.echoForPossibleCures(table.concat(affs, " "))
         for i = 1, #affs do            
            ocured = ocured or {}
            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}
            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
                affstrack.score[affs[i]] = 0
								ak.AfflictionCured(affs[i])
            end
						ak.ProTrackingConfirmed("asthma")
						ak.ResetConfirmAff(affs[i])
         end
		 elseif #affs == 1 then
         ak.echoForPossibleCures(table.concat(affs, " "))
         ocured = ocured or {}
         ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}
         ocured[ocured.conversion[what]][affs[1]] = affstrack.score[affs[1]]
         affstrack.score[affs[1]] = affstrack.score[affs[1]] - affstrack.score[affs[1]] / #affs
         if affstrack.score[affs[1]] &lt; ak.errorallowance then
             affstrack.score[affs[1]] = 0
					ak.AfflictionCured(affs[1])
         end
			   ak.ResetConfirmAff(affs[1])
      elseif #affs &gt; 0 then
         ak.echoForPossibleCures(table.concat(affs, " "))
         for i = 1, #affs do
            ocured = ocured or {}
            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}
            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]
            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
                affstrack.score[affs[i]] = 0
								ak.AfflictionCured(affs[i])
            end
         end
      elseif ak.randomaffs &gt; 0 then
         ak.randomaffs = ak.randomaffs - 1
      else
         if ak.WhyYouDoThat then ak.WhyYouDoThat(what) end
      end
   end
   ak.scoreup(target)
end

function ak.goldensealCount()
	local count = 0
	for i = 1, #affstrack.eaten["goldenseal root"] do
     if affstrack.score[affstrack.eaten["goldenseal root"][i]] &gt; 0 then
        count = count + affstrack.score[affstrack.eaten["goldenseal root"][i]]
     end
  end
	return count
end

function FocusCount()
  local count = 0
  for i = 1, #affstrack.focused do
      if affstrack.score[affstrack.focused[i]] &gt; 0 then
         count = count + affstrack.score[affstrack.focused[i]]
      end
   end
   return count
end

function SmokeCount()
   local count = 0
   if affstrack.score.aeon &gt; 0 then return 0 end
   for i = 1, #affstrack.smoked do
      if affstrack.score[affstrack.smoked[i]] &gt; 0 then
         count = count + affstrack.score[affstrack.smoked[i]]
      end
   end
   return count
end

if not ak.nexteatcheck then
   function ak.nexteatcheck(what)
		ak.lasteat = what
   end
end

function ak.canstand()
	if affstrack.score.rightleg == 0 and affstrack.score.leftleg == 0 then
		return true
	else
		return false
	end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>ofocus</name>
							<packageName></packageName>
							<script>function ak.cure.focus(whom)
	ak.occie.aura.parsereduct("focus")
   local affs = {}
   ocured = ocured or {}
   ocured.focused = {}
   ak.randomaffs = ak.randomaffs or 0
   affstrack.score.rixil = 0
   if affstrack.score.impatience&gt;0 then 
      if ak.thoughtIhad then ak.thoughtIhad("impatience") else affstrack.score.impatience = 0 end
      ocured = ocured or {}
      ocured.focused = {}  
   end
   for i = 1, #affstrack.focused  do
      if affstrack.score[affstrack.focused[i]] &gt; 0 then
         table.insert(affs, affstrack.focused[i])
      end
   end
   if #affs == 1 and affstrack.score[affs[1]] &lt; 100 and ak.randomaffs == 0 then
      if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end
      affstrack.score[affs[1]] = 0
			ak.AfflictionCured(affs[1])
			ak.ResetConfirmAff(affs[1])
	 elseif #affs == 1 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      ocured.focused[affs[1]] = affstrack.score[affs[1]]
      affstrack.score[affs[1]] = 0
			ak.AfflictionCured(affs[1])
			ak.ResetConfirmAff(affs[1])
   elseif #affs &gt; 0 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         ocured.focused[affs[i]] = affstrack.score[affs[i]]
         affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs
         if affstrack.score[affs[i]] &lt; ak.errorallowance then
            affstrack.score[affs[i]] = 0
						ak.AfflictionCured(affs[i])
         end
      end
   elseif ak.randomaffs &gt; 0 then
      ak.randomaffs = ak.randomaffs - 1
   else
      if ak.WhyYouDoThat then ak.WhyYouDoThat("focused") end
   end
   ak.scoreup(target)
end



</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>otree</name>
							<packageName></packageName>
							<script>function ak.cure.tree()
	 ak.occie.aura.parsereduct("treed")
   affs = {}
   ocured = ocured or {}
   ocured.treed = {}
   ak.randomaffs = ak.randomaffs or 0
   affoverone = {}
   affovertwo = {}
   affoverthree = {}
   affoverfour = {}
   affoverfive = {}
   affoversix = {}
   applycure = applycure or {}
   if ak.treeableSalve() and applycure.lastapplied and applycure.lastapplied ~= "head" and applycure.lastapplied ~= "torso" and applycure.aknextsalve ~= "mending" then
      --AKcalculateSalve()
   end
   affs = {}
   ocured = ocured or {}
   ocured.treed = {}
   ak.randomaffs = ak.randomaffs or 0
   affoverone = {}
   affovertwo = {}
   affoverthree = {}
   affoverfour = {}
   affoverfive = {}
   affoversix = {}
   if affstrack.score.paralysis &gt; 0 then
      if ak.thoughtIhad then ak.thoughtIhad("paralysis") else affstrack.score.paralysis = 0 end
      ocured.bloodroot = {}
      ocured = ocured or {}
      ocured.treed = {}
   elseif affstrack.score.slickness &gt; 0 then
     ocured.bloodroot = {}
   end
   for i = 1, #affstrack.treed do
      if affstrack.score[affstrack.treed[i]] &gt; 0 and affstrack.score[affstrack.treed[i]] &lt; 200 and affstrack.treed[i] ~= "aflame" and affstrack.treed[i] ~= "frozen" then
         table.insert(affs, affstrack.treed[i]) 
         ocured.treed[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]]     
         if affstrack.score[affstrack.treed[i]] &gt; 100 then-- and affstrack.score[affstrack.treed[i]] ~= 200 then
            table.insert(affoverone, affstrack.treed[i]) 
            affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100
         end
      elseif affstrack.score.hypothermia == 100 and affstrack.treed[i] == "frozen" then

      elseif affstrack.score[affstrack.treed[i]] &gt; 0 and (affstrack.treed[i] == "aflame" or affstrack.treed[i] == "frozen") then
         table.insert(affs, affstrack.treed[i]) 
         ocured.treed[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]]
         if affstrack.score[affstrack.treed[i]] &gt; 100 then
            table.insert(affoverone, affstrack.treed[i]) 
            affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100
            if affstrack.score[affstrack.treed[i]] &gt; 100 then
               table.insert(affovertwo, affstrack.treed[i]) 
               affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100
               if affstrack.score[affstrack.treed[i]] &gt; 100 then
                  table.insert(affoverthree, affstrack.treed[i]) 
                  affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100
                  if affstrack.score[affstrack.treed[i]] &gt; 100 then
                     table.insert(affoverfour, affstrack.treed[i]) 
                     affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100
                     if affstrack.score[affstrack.treed[i]] &gt; 100 then
                        table.insert(affoverfive, affstrack.treed[i]) 
                        affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100
                        if affstrack.score[affstrack.treed[i]] &gt; 100 then
                           table.insert(affoversix, affstrack.treed[i]) 
                           affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100
                        end
                     end
                  end
               end
            end
         end
      end   
   end
   if #affs == 1 and affstrack.score[affs[1]] &lt; 100 and ak.randomaffs == 0 then
      if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end
      affstrack.score[affs[1]] = 0
			ak.AfflictionCured(affs[1])
			ak.ResetConfirmAff(affs[1])
   elseif #affs &gt; 1 and table.contains(affs,"impatience") and FocusCount() &gt;= 100 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         if affs[i] ~= "impatience" then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs -1)
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
               affstrack.score[affs[i]] = 0
							 ak.AfflictionCured(affs[i])
            end     
            if table.contains(affoverone, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(affovertwo, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(affoverthree, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(affoverfour, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(affoverfive, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           if table.contains(affoversix, affs[i]) then
                              affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           end
                        end
                     end
                  end
               end 
            end           
         end
      end  
      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end
   elseif #affs &gt; 1 and table.contains(affs,"asthma") and SmokeCount() &gt;= 100 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         if affs[i] ~= "asthma" then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs -1)
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
               affstrack.score[affs[i]] = 0
							 ak.AfflictionCured(affs[i])
            end     
            if table.contains(affoverone, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(affovertwo, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(affoverthree, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(affoverfour, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(affoverfive, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           if table.contains(affoversix, affs[i]) then
                              affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           end
                        end
                     end
                  end
               end 
            end           
         end
      end  
      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end
   elseif #affs &gt; 0 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         --ocured.treed[affs[i]] = affstrack.score[affs[i]]                                       --move me
         affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs 
         if affstrack.score[affs[i]] &lt; ak.errorallowance then
            affstrack.score[affs[i]] = 0
						ak.AfflictionCured(affs[i])
         end     
         if table.contains(affoverone, affs[i]) then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
            if table.contains(affovertwo, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(affoverthree, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(affoverfour, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(affoverfive, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(affoversix, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        end
                     end
                  end
               end
            end 
         end           
      end  
      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end
   elseif ak.randomaffs &gt; 0 then
      AKcalculateSalve()
      ak.randomaffs = ak.randomaffs - 1
   else
      if ak.WhyYouDoThat then ak.WhyYouDoThat("treed") end
   end
   ak.scoreup(target)
end

local LimbsToCheck = {"rightleg","leftleg","rightarm","leftarm"}

function ak.treeableSalve()
	if affstrack.score.aflame &gt; 0 then
		return true
	end
	for i = 1, #LimbsToCheck do
		if affstrack.score[LimbsToCheck[i]] &gt; 0 and affstrack.score[LimbsToCheck[i]] &lt;= 100 then
			return true
		elseif affstrack.score[LimbsToCheck[i]] &gt; 100 and affstrack.score[LimbsToCheck[i]] &lt;= 200 and applycure.lastapplied ~= "torso" and applycure.lastapplied ~= "head" and applycure.aknextsalve ~= "mending" then
			return true
		end
	end

	return false

end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>osmoke</name>
							<packageName></packageName>
							<script>ak.smoke = ak.smoke or {}

function affssmoke()
	ak.smoke.mass = {}
	ak.occie.aura.parsereduct("smoke")
   local affs = {}
   ocured = ocured or {}
   ak.randomaffs = ak.randomaffs or 0
   ocured.smoked = {}
   if affstrack.score.asthma&gt;0 then 
      if ak.thoughtIhad then ak.thoughtIhad("asthma") else affstrack.score.asthma = 0 end
      ocured = ocured or {}
      ocured.smoked = {}
   end
   for i = 1, #affstrack.smoked do
      if affstrack.score[affstrack.smoked[i]] &gt; 0 then
         table.insert(affs, affstrack.smoked[i])
      end
   end
   if #affs == 1 then
	 		if affstrack.score[affs[1]] &lt; 100 and ak.randomaffs == 0 then
      	if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end
      end
			ak.smoke.RetainMass(affs[1], affstrack.score[affs[1]])
			affstrack.score[affs[1]] = 0	
			ak.smoke.RestoreMass(affs[1])
			if affstrack.score[affs[1]] == 0 then
				 ak.AfflictionCured(affs[1])
				 ak.ResetConfirmAff(affs[1])
			end
   elseif #affs &gt; 0 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         ocured.smoked[affs[i]] = affstrack.score[affs[i]]
				 ak.smoke.RetainMass(affs[1], affstrack.score[affs[1]])
         affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs
         if affstrack.score[affs[i]] &lt; ak.errorallowance then
            affstrack.score[affs[i]] = 0
         end
				 ak.smoke.RestoreMass(affs[i])
				 if affstrack.score[affs[i]] == 0 then
				 	  ak.AfflictionCured(affs[i])
				 end
      end
   elseif ak.randomaffs &gt; 0 then
      ak.randomaffs = ak.randomaffs - 1
   else
       reboundingaccountak = true
       if reboundingaktime then killTimer(reboundingaktime) end
       reboundingaktime = tempTimer(11,[[reboundingaccountak = false]])
   end
   ak.scoreup(target)
end

function ak.smoke.RetainMass(aff, count)
	ak.smoke.mass[aff] = roundDown(count-1,-2)
end

function ak.smoke.RestoreMass(aff)
	local returner = ak.smoke.mass[aff] or 0
	affstrack.score[aff] = affstrack.score[aff] + returner
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>opassive</name>
							<packageName></packageName>
							<script>function ak.cure.passive()
	ak.occie.aura.parsereduct("passive")
   if affstrack.score.voyria == 100 then
      affstrack.score.voyria = 0 
      return
   end
   affs = {}
   ak.randomaffs = ak.randomaffs or 0
   affoverone = {}
   affovertwo = {}
   affoverthree = {}
   affoverfour = {}
   affoverfive = {}
   affoversix = {}
   ocured = ocured or {}
   ocured.cureall = {}
   for i = 1, #affstrack.cureall do
      if affstrack.score[affstrack.cureall[i]] &gt; 0  then
         table.insert(affs, affstrack.cureall[i])
         ocured.cureall[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]]
         if affstrack.score[affstrack.cureall[i]] &gt; 100 and affstrack.cureall[i] == "aflame" then
            table.insert(affoverone, affstrack.cureall[i]) 
            affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
            if affstrack.score[affstrack.cureall[i]] &gt; 100 then
               table.insert(affovertwo, affstrack.cureall[i]) 
               affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
               if affstrack.score[affstrack.cureall[i]] &gt; 100 then
                  table.insert(affoverthree, affstrack.cureall[i]) 
                  affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
                  if affstrack.score[affstrack.cureall[i]] &gt; 100 then
                     table.insert(affoverfour, affstrack.cureall[i]) 
                     affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
                     if affstrack.score[affstrack.cureall[i]] &gt; 100 then
                        table.insert(affoverfive, affstrack.cureall[i]) 
                        affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
                        if affstrack.score[affstrack.cureall[i]] &gt; 100 then
                           table.insert(affoversix, affstrack.cureall[i]) 
                           affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
                        end
                     end
                  end
               end
            end
         end
      end
   end
   if #affs == 1 and affstrack.score[affs[1]] &lt; 100 and ak.randomaffs == 0 then
      if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end
      affstrack.score[affs[1]] = 0
			ak.AfflictionCured(affs[1])
			ak.ResetConfirmAff(affs[1])
   elseif #affs &gt; 1 and table.contains(affs,"impatience") and FocusCount() &gt;= 100 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         ocured.cureall[affs[i]] = affstrack.score[affs[i]]
         if affs[i] ~= "impatience" then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
               affstrack.score[affs[i]] = 0
							 ak.AfflictionCured(affs[i])
            end
            if table.contains(affoverone, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(affovertwo, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(affoverthree, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(affoverfour, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(affoverfive, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           if table.contains(affoversix, affs[i]) then
                              affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           end
                        end
                     end
                  end
               end
            end 
         end        
      end
   elseif #affs &gt; 1 and table.contains(affs,"asthma") and SmokeCount() &gt;= 100 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         ocured.cureall[affs[i]] = affstrack.score[affs[i]]
         if affs[i] ~= "asthma" then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
               affstrack.score[affs[i]] = 0
							 ak.AfflictionCured(affs[i])
            end
            if table.contains(affoverone, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(affovertwo, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(affoverthree, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(affoverfour, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(affoverfive, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           if table.contains(affoversix, affs[i]) then
                              affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           end
                        end
                     end
                  end
               end
            end 
         end        
      end
   elseif #affs &gt; 0 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         ocured.cureall[affs[i]] = affstrack.score[affs[i]]
         affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs
         if affstrack.score[affs[i]] &lt; ak.errorallowance then
            affstrack.score[affs[i]] = 0
						ak.AfflictionCured(affs[i])
         end
         if table.contains(affoverone, affs[i]) then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
            if table.contains(affovertwo, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(affoverthree, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(affoverfour, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(affoverfive, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(affoversix, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        end
                     end
                  end
               end
            end 
         end        
      end
      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end
   elseif ak.randomaffs &gt; 0 then
      ak.randomaffs = ak.randomaffs - 1
   else
      if ak.WhyYouDoThat then ak.WhyYouDoThat("cureall") end
   end
   ak.scoreup(target)
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>oactive</name>
							<packageName></packageName>
							<script>function ak.cure.active()
	ak.occie.aura.parsereduct("passive")
   if affstrack.score.voyria == 100 then
      affstrack.score.voyria = 0 
      return
   end
   affs = {}
   ak.randomaffs = ak.randomaffs or 0
   affoverone = {}
   affovertwo = {}
   affoverthree = {}
   affoverfour = {}
   affoverfive = {}
   affoversix = {}
   ocured = ocured or {}
   ocured.cureall = {}
   for i = 1, #affstrack.cureall do
      if affstrack.score[affstrack.cureall[i]] &gt; 0  then
         table.insert(affs, affstrack.cureall[i])
         ocured.cureall[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]]
         if affstrack.score[affstrack.cureall[i]] &gt; 100 and affstrack.cureall[i] == "aflame" then
            table.insert(affoverone, affstrack.cureall[i]) 
            affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
            if affstrack.score[affstrack.cureall[i]] &gt; 100 then
               table.insert(affovertwo, affstrack.cureall[i]) 
               affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
               if affstrack.score[affstrack.cureall[i]] &gt; 100 then
                  table.insert(affoverthree, affstrack.cureall[i]) 
                  affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
                  if affstrack.score[affstrack.cureall[i]] &gt; 100 then
                     table.insert(affoverfour, affstrack.cureall[i]) 
                     affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
                     if affstrack.score[affstrack.cureall[i]] &gt; 100 then
                        table.insert(affoverfive, affstrack.cureall[i]) 
                        affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
                        if affstrack.score[affstrack.cureall[i]] &gt; 100 then
                           table.insert(affoversix, affstrack.cureall[i]) 
                           affstrack.score[affstrack.cureall[i]] = affstrack.score[affstrack.cureall[i]] - 100
                        end
                     end
                  end
               end
            end
         end
      end
   end
   if #affs == 1 and affstrack.score[affs[1]] &lt; 100 and ak.randomaffs == 0 then
      if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end
      affstrack.score[affs[1]] = 0
			ak.AfflictionCured(affs[1])
			ak.ResetConfirmAff(affs[1])
   elseif #affs &gt; 1 and table.contains(affs,"impatience") and FocusCount() &gt;= 100 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         ocured.cureall[affs[i]] = affstrack.score[affs[i]]
         if affs[i] ~= "impatience" then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
               affstrack.score[affs[i]] = 0
							 ak.AfflictionCured(affs[i])
            end
            if table.contains(affoverone, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(affovertwo, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(affoverthree, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(affoverfour, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(affoverfive, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           if table.contains(affoversix, affs[i]) then
                              affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           end
                        end
                     end
                  end
               end
            end 
         end        
      end
   elseif #affs &gt; 1 and table.contains(affs,"asthma") and SmokeCount() &gt;= 100 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         ocured.cureall[affs[i]] = affstrack.score[affs[i]]
         if affs[i] ~= "asthma" then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)
            if affstrack.score[affs[i]] &lt; ak.errorallowance then
               affstrack.score[affs[i]] = 0
							 ak.AfflictionCured(affs[i])
            end
            if table.contains(affoverone, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(affovertwo, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(affoverthree, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(affoverfour, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(affoverfive, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           if table.contains(affoversix, affs[i]) then
                              affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                           end
                        end
                     end
                  end
               end
            end 
         end        
      end
   elseif #affs &gt; 0 then
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         ocured.cureall[affs[i]] = affstrack.score[affs[i]]
         affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs
         if affstrack.score[affs[i]] &lt; ak.errorallowance then
            affstrack.score[affs[i]] = 0
						ak.AfflictionCured(affs[i])
         end
         if table.contains(affoverone, affs[i]) then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
            if table.contains(affovertwo, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(affoverthree, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(affoverfour, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(affoverfive, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(affoversix, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        end
                     end
                  end
               end
            end 
         end        
      end
      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end
   elseif ak.randomaffs &gt; 0 then
      ak.randomaffs = ak.randomaffs - 1
   else
      if ak.WhyYouDoThat then ak.WhyYouDoThat("cureall") end
   end
   ak.scoreup(target)
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>oapply</name>
							<packageName></packageName>
							<script>function ak.cure.apply(what) 
	 if ak.timers.salvebackup then killTimer(ak.timers.salvebackup) end
   if aksalvechange then killTimer(aksalvechange) end
   if akrestoration then killTimer(akrestoration) end
   applycure = applycure or {} 
   if applycure.lastapplied then
      AKcalculateSalve()
   end
	 if what ~= "none" then
	 		ak.enemyprio.applied(what)
      ak.cure.lastapplied = what
      ak.randomaffs = ak.randomaffs or 0
      applycure = {}
      applycure.aknextsalve = false
      applycure.lastapplied = what
      applycure.affoverone = {}
      applycure.affovertwo = {}
      applycure.affoverthree = {}
      applycure.affoverfour = {}
      applycure.affoverfive = {}
      applycure.affoversix = {}
      applycure.donotrecount = {}
      applycure.possiblemendings = {}
      applycure.mendingscore = 0
      applycure.possiblerestorations = {}
      applycure.restorationscore = 0
      applycure.totalscore = 0
      applycure.both = {}
      applycure.otableadd = "applied"..what
      for i = 1, #affstrack.applied[what] do
         --display( affstrack.applied[what][i])--probable cures  
         --display(affstrack.score[affstrack.applied[what][i]])     
         if affstrack.score[affstrack.applied[what][i]] &gt; 0 and affstrack.applied[what][i] ~= "frozen" and affstrack.applied[what][i] ~= "aflame" and (affstrack.score[affstrack.applied[what][i]] &gt; 100 or affstrack.applied[what][i] == "head" or affstrack.applied[what][i] == "torso" or affstrack.applied[what][i] == "hypothermia") then
            table.insert(applycure.possiblerestorations, affstrack.applied[what][i])
            table.insert(applycure.both, affstrack.applied[what][i])
            table.insert(applycure.donotrecount, affstrack.applied[what][i]) 
						if affstrack.score[affstrack.applied[what][i]] &lt; 200 then
							table.insert(applycure.possiblemendings, affstrack.applied[what][i]) 
							applycure.mendingscore = affstrack.score[affstrack.applied[what][i]] + applycure.mendingscore 
						end
            applycure.restorationscore = affstrack.score[affstrack.applied[what][i]] + applycure.restorationscore
            applycure.totalscore  =  affstrack.score[affstrack.applied[what][i]] + applycure.totalscore
            AKBackupSalveNumber(affstrack.applied[what][i])
         elseif affstrack.score[affstrack.applied[what][i]] &gt; 100 and (affstrack.applied[what][i] == "frozen" or affstrack.applied[what][i] == "aflame") then
            table.insert(applycure.possiblemendings, affstrack.applied[what][i]) 
            table.insert(applycure.both, affstrack.applied[what][i])
            table.insert(applycure.donotrecount, affstrack.applied[what][i]) 
            applycure.mendingscore = affstrack.score[affstrack.applied[what][i]] + applycure.mendingscore  
            applycure.totalscore  =  affstrack.score[affstrack.applied[what][i]] + applycure.totalscore 
            AKBackupSalveNumber(affstrack.applied[what][i])
         elseif affstrack.score[affstrack.applied[what][i]] &gt; 0 then
            table.insert(applycure.possiblemendings, affstrack.applied[what][i]) 
            table.insert(applycure.both, affstrack.applied[what][i])
            table.insert(applycure.donotrecount, affstrack.applied[what][i]) 
            applycure.mendingscore = affstrack.score[affstrack.applied[what][i]] + applycure.mendingscore  
            applycure.totalscore  =  affstrack.score[affstrack.applied[what][i]] + applycure.totalscore     
         end
      end
      for k,v in pairs(affstrack.applied) do
         for i=1, #affstrack.applied[k] do
            if not table.contains(applycure.donotrecount, affstrack.applied[k][i]) and affstrack.score[affstrack.applied[k][i]] &gt; 0 then
							 applycure.totalscore  =  affstrack.score[affstrack.applied[k][i]] + applycure.totalscore 
            end
         end
      end
      applycure.totalscore = applycure.totalscore / 100
      applycure.mendingscore = applycure.mendingscore / 100
      applycure.restorationscore = applycure.restorationscore / 100
      if applycure.totalscore &lt;= 1 and applycure.totalscore &gt; 0 then --only one confirmed apply coming
         if #applycure.possiblemendings == 0 then
            applycure.aknextsalve = "restoration"
            if akrestoration then killTimer(akrestoration) end
            akrestoration = tempTimer(3.5,[[ak.cure.apply("none");affstrack.score.tempslickness = 0;ak.scoreup(target)]])
            affstrack.score.tempslickness = 100      
         elseif #applycure.possiblerestorations == 0 then
            applycure.aknextsalve = "mending"
            ak.cure.apply("none")
         else
            applycure.aknextsalve = "both"
            ak.cure.apply("none")
         end
      elseif applycure.totalscore &gt; 0 then                          --MORE CURES COMING!
				 if ak.timers.salvebackup then killTimer(ak.timers.salvebackup) end
         ak.timers.salvebackup = tempTimer(5,[[ak.cure.salveBackup()]])
         if applycure.restorationscore &gt; 0 and applycure.mendingscore &gt; 0 then
            applycure.aknextsalve = "mending"
						if affstrack.score.crushedthroat == 100 and what == "head" then
							ak.cure.apply("none")
							return
						end
            if aksalvechange then killTimer(aksalvechange) end
            aksalvechange = tempTimer(2.5,[[
               if affstrack.score.slickness == 0 then
                  applycure.aknextsalve = "restoration"
               end
            ]])
         elseif applycure.restorationscore &gt; 0 and applycure.mendingscore == 0 then	 
            applycure.aknextsalve = "restoration"
            affstrack.score.tempslickness = 100  
            if aksalvechange then killTimer(aksalvechange) end
         elseif applycure.restorationscore == 0 and applycure.mendingscore &gt; 0 then
            applycure.aknextsalve = "mending"
            ak.cure.apply("none")
         end
		  elseif applycure.lastapplied == "body" and applycure.totalscore == 0 and affstrack.score.impatience == 100 then
				 if ak.thoughtIhad then ak.thoughtIhad("impatience") else affstrack.score.impatience = 0 end
				 affstrack.score.anorexia = 0 
      elseif applycure.lastapplied ~= "skin" then
         if ak.NoPreApply then

         elseif (gmcp.Char.Status.class ~= "Magi" or gmcp.Char.Status.race:match("Dragon")) then         
            applycure.aknextsalve = "restoration"
            if akrestoration then killTimer(akrestoration) end
            akrestoration = tempTimer(3.5,[[ak.cure.apply("none");affstrack.score.tempslickness = 0;ak.scoreup(target)]])
            affstrack.score.tempslickness = 100  
         end
			elseif applycure.lastapplied == "skin" then
				applycure.lastapplied = nil	 
      end
   else
      applycure = {}
      applycure.aknextsalve = nil
      applycure.lastapplied = nil
      applycure.affoverone = {}
      applycure.affovertwo = {}
      applycure.affoverthree = {}
      applycure.affoverfour = {}
      applycure.affoverfive = {}
      applycure.affoversix = {}
      applycure.donotrecount = {}
      applycure.possiblemendings = {}
      applycure.mendingscore = 0
      applycure.possiblerestorations = {}
      applycure.restorationscore = 0
      applycure.totalscore = 0
      applycure.both = {}
   end
   ak.scoreup(target)
end

function ak.cure.salveBackup()
	if affstrack.score.slickness == 0 then
		ak.cure.apply("none")
		cecho("\n&lt;cyan&gt;They are not applying salves. Forcing previous restoration cure through.\n")
	else
		if ak.timers.salvebackup then killTimer(ak.timers.salvebackup) end
    ak.timers.salvebackup = tempTimer(1,[[ak.cure.salveBackup()]])
	end
end


function AKcalculateSalve()
	 if ak.debug then 
	 	display("applycure")
		display(applycure)
	 end
   local affs = {}
   ak.cure.lastapplied = what
   ak.randomaffs = ak.randomaffs or 0
   applycure = applycure or {}
   applycure.aknextsalve = applycure.aknextsalve or "restoration"
   applycure.lastapplied = applycure.lastapplied or "torso"
   applycure.affoverone = {}
   applycure.affovertwo = {}
   applycure.affoverthree = {}
   applycure.affoverfour = {}
   applycure.affoverfive = {}
   applycure.affoversix = {}
   applycure.donotrecount = {}
   applycure.possiblemendings = {}
   applycure.mendingscore = 0
   applycure.possiblerestorations = {}
   applycure.restorationscore = 0
   applycure.totalscore = 0
   applycure.both = {}
   applycure.otableadd = "applied"..applycure.lastapplied
   ocured = ocured or {}
   ocured[applycure.otableadd] = {} 
   local ToBeCleared = {}
      for i = 1, #affstrack.applied[applycure.lastapplied] do
         --display( affstrack.applied[applycure.lastapplied][i])--probable cures         
         if affstrack.score[affstrack.applied[applycure.lastapplied][i]] &gt; 0 and affstrack.applied[applycure.lastapplied][i] ~= "frozen" and affstrack.applied[applycure.lastapplied][i] ~= "aflame" and (affstrack.score[affstrack.applied[applycure.lastapplied][i]] &gt; 100 or affstrack.applied[applycure.lastapplied][i] == "head" or affstrack.applied[applycure.lastapplied][i] == "torso" or affstrack.applied[applycure.lastapplied][i] == "hypothermia") then
            table.insert(ToBeCleared, affstrack.applied[applycure.lastapplied][i])
            table.insert(applycure.possiblerestorations, affstrack.applied[applycure.lastapplied][i])
            table.insert(applycure.both, affstrack.applied[applycure.lastapplied][i])
            table.insert(applycure.donotrecount, affstrack.applied[applycure.lastapplied][i]) 
            applycure.restorationscore = affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.restorationscore
            applycure.totalscore  =  affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.totalscore
            AKBackupSalveNumber(affstrack.applied[applycure.lastapplied][i])
         elseif affstrack.score[affstrack.applied[applycure.lastapplied][i]] &gt; 100 and (affstrack.applied[applycure.lastapplied][i] == "frozen" or affstrack.applied[applycure.lastapplied][i] == "aflame") then                   
            table.insert(applycure.possiblemendings, affstrack.applied[applycure.lastapplied][i]) 
            table.insert(applycure.both, affstrack.applied[applycure.lastapplied][i])
            table.insert(applycure.donotrecount, affstrack.applied[applycure.lastapplied][i]) 
            applycure.mendingscore = affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.mendingscore  
            applycure.totalscore  =  affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.totalscore 
            AKBackupSalveNumber(affstrack.applied[applycure.lastapplied][i])
         elseif affstrack.score[affstrack.applied[applycure.lastapplied][i]] &gt; 0 then
            table.insert(applycure.possiblemendings, affstrack.applied[applycure.lastapplied][i]) 
            table.insert(applycure.both, affstrack.applied[applycure.lastapplied][i])
            table.insert(applycure.donotrecount, affstrack.applied[applycure.lastapplied][i]) 
            applycure.mendingscore = affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.mendingscore  
            applycure.totalscore  =  affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.totalscore     
         end
      end
      applycure.totalscore = applycure.totalscore / 100
      applycure.mendingscore = applycure.mendingscore / 100
      applycure.restorationscore = applycure.restorationscore / 100
   if applycure.aknextsalve ~= "both" then
      if applycure.aknextsalve == "mending" and applycure.mendingscore &gt; 0 then
         for i = 1, #applycure.possiblemendings do
            ocured[applycure.otableadd][applycure.possiblemendings[i]] = affstrack.score[applycure.possiblemendings[i]] 
            table.insert(affs, applycure.possiblemendings[i])
         end
      elseif applycure.aknextsalve == "restoration" and applycure.restorationscore &gt; 0 then
         for i = 1, #applycure.possiblerestorations do
            ocured[applycure.otableadd][applycure.possiblerestorations[i]] = affstrack.score[applycure.possiblerestorations[i]] 
            table.insert(affs, applycure.possiblerestorations[i])
         end
      else
         applycure.aknextsalve = "both"
         for i = 1, #applycure.possiblerestorations do
            ocured[applycure.otableadd][applycure.possiblerestorations[i]] = affstrack.score[applycure.possiblerestorations[i]] 
            table.insert(affs, applycure.possiblerestorations[i])
          end
         for i = 1, #applycure.possiblemendings do
            ocured[applycure.otableadd][applycure.possiblemendings[i]] = affstrack.score[applycure.possiblemendings[i]] 
            table.insert(affs, applycure.possiblemendings[i])
         end
      end
   elseif applycure.aknextsalve == "both" then
      for i = 1, #applycure.possiblerestorations do
         ocured[applycure.otableadd][applycure.possiblerestorations[i]] = affstrack.score[applycure.possiblerestorations[i]] 
         table.insert(affs, applycure.possiblerestorations[i])
      end
      for i = 1, #applycure.possiblemendings do
         ocured[applycure.otableadd][applycure.possiblemendings[i]] = affstrack.score[applycure.possiblemendings[i]] 
         table.insert(affs, applycure.possiblemendings[i])
      end
   end
   --display(affs)
   --display(affstrack.score[affs[1]])
   if #affs == 1 and affstrack.score[affs[1]] &lt; 100 then
      if #ToBeCleared &gt; 0 then
         for i = 1, #ToBeCleared do
            ak.limbs.CountAgain(ToBeCleared[i])
         end
      end
      ocured[applycure.otableadd] = {}
      if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end
      ocured[applycure.otableadd] = {}
      ocured[applycure.otableadd][affs[1]] = 100
   end
   if #affs &gt; 0 then
      AKleftcuresfirst(affs)
      if #ToBeCleared &gt; 0 then
         for i = 1, #ToBeCleared do
            ak.limbs.CountAgain(ToBeCleared[i])
         end
      end
      ak.echoForPossibleCures(table.concat(affs, " "))
      for i = 1, #affs do
         reduceSalveAff(affs[i])
         affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs
         if affstrack.score[affs[i]] &lt; ak.errorallowance then
            affstrack.score[affs[i]] = 0
						ak.AfflictionCured(affs[i])
         end
         if table.contains(applycure.affoverone, affs[i]) then
            affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
            if table.contains(applycure.affovertwo, affs[i]) then
               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
               if table.contains(applycure.affoverthree, affs[i]) then
                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                  if table.contains(applycure.affoverfour, affs[i]) then
                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                     if table.contains(applycure.affoverfive, affs[i]) then
                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        if table.contains(applycure.affoversix, affs[i]) then
                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100
                        end
                     end
                  end
               end
            end 
         end
      end
      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end
      if affstrack.score.hypothermia == 100 and affstrack.score.frozen == 0 then affstrack.score.hypothermia = 0 end
   elseif ak.randomaffs &gt; 0 then
      ak.randomaffs = ak.randomaffs - 1
   else

   end
   applycure.lastapplied = nil
   affstrack.score.tempslickness = 0 
   ak.scoreup(target)
end



function AKBackupSalveNumber(aff)
   local resetcure = tonumber(affstrack.score[aff])
   if affstrack.score[aff] &gt; 100 then
      table.insert(applycure.affoverone, aff) 
      affstrack.score[aff] = affstrack.score[aff] - 100
      if affstrack.score[aff] &gt; 100 then
        table.insert(applycure.affovertwo, aff) 
        affstrack.score[aff] = affstrack.score[aff] - 100
        if affstrack.score[aff] &gt; 100 then
           table.insert(applycure.affoverthree, aff) 
           affstrack.score[aff] = affstrack.score[aff] - 100
           if affstrack.score[aff] &gt; 100 then
              table.insert(applycure.affoverfour, aff) 
              affstrack.score[aff] = affstrack.score[aff] - 100
              if affstrack.score[aff] &gt; 100 then
                 table.insert(applycure.affoverfive, aff) 
                 affstrack.score[aff] = affstrack.score[aff] - 100
                 if affstrack.score[aff] &gt; 100 then
                    table.insert(applycure.affoversix, aff) 
                    affstrack.score[aff] = affstrack.score[aff] - 100
                 end
              end
           end
        end
      end
   end
   affstrack.score[aff] = tonumber(resetcure)
end
function reduceSalveAff(aff)
   if affstrack.score[aff] &gt; 100 then
      affstrack.score[aff] = affstrack.score[aff] - 100
      if affstrack.score[aff] &gt; 100 then
        affstrack.score[aff] = affstrack.score[aff] - 100
        if affstrack.score[aff] &gt; 100 then
           affstrack.score[aff] = affstrack.score[aff] - 100
           if affstrack.score[aff] &gt; 100 then
              affstrack.score[aff] = affstrack.score[aff] - 100
              if affstrack.score[aff] &gt; 100 then
                 affstrack.score[aff] = affstrack.score[aff] - 100
                 if affstrack.score[aff] &gt; 100 then
                    affstrack.score[aff] = affstrack.score[aff] - 100
                 end
              end
           end
        end
      end
   end 
end

function AKleftcuresfirst(affs)
   if table.contains(affs,"rightleg") and table.contains(affs,"leftleg") then 
      for i=1, #affs do
         if affs[i] == "rightleg" then
            table.remove(affs,i)
         end
      end   
   elseif table.contains(affs,"rightarm") and table.contains(affs,"leftarm") then
      for i=1, #affs do
         if affs[i] == "rightarm" then
            table.remove(affs,i)
         end
      end 
   end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Unknown Apply</name>
							<packageName></packageName>
							<script>--unknown application 

ak = ak or {}
ak.NoPreApply = false

ak.whyapply = function(location)



end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Occie Random Generator</name>
							<packageName></packageName>
							<script>--akocciegen
--ak.occie.aura.physical
--ak.occie.aura.mental

function ak.occie.aura.parse_unnamable(count)
	ak.occie.aura.mental = ak.occie.aura.mental + count
	local addaffs = {"stupidity","dementia","confusion"}
	if count == 3 then
		for i = 1, #addaffs do
			if affstrack.score[addaffs[i]] &gt; 0 then
				ak.ProTrackingConfirmed(addaffs[i])
        affstrack.score.stupidity = 100
        affstrack.score.dementia = 100
				affstrack.score.confusion = 100
				ak.scoreup(target)
				return
			end
		end
    affstrack.score.stupidity = 100
    affstrack.score.dementia = 100
		affstrack.score.confusion = 100
		ak.scoreup(target)
		return
	elseif count == 2 then
		if affstrack.score.stupidity == 100 then
			affstrack.score.confusion = 100
			affstrack.score.dementia = 100
		elseif affstrack.score.dementia == 100 then
			affstrack.score.stupidity = 100
			affstrack.score.confusion = 100
		elseif affstrack.score.confusion == 100 then
			affstrack.score.stupidity = 100
			affstrack.score.dementia = 100
		else

		end
		ak.scoreup(target)
		return
	elseif count == 1 then
		if affstrack.score.stupidity == 100 and affstrack.score.confusion == 100 then
			affstrack.score.dementia = 100
		elseif affstrack.score.stupidity == 100 and affstrack.score.dementia == 100 then
			affstrack.score.confusion = 100
		elseif affstrack.score.dementia == 100 and affstrack.score.confusion == 100 then
			affstrack.score.stupidity = 100
		else

		end
		ak.scoreup(target)
		return
 	end
end

function ak.occie.aura.parsereduct(what)
	if ak.backtracking then 
		ak.backtracking = false
		return 
	end
	if gmcp.Char.Status.race:match("Dragon") or gmcp.Char.Status.class ~= "Occultist" then return end
	ak.occie.aura.mentalcures = {
    "focus",
    "argentum flake",
    "lobelia seed",
    "stannum flake",
    "prickly ash bark",
    "plumbum flake",
    "goldenseal root",
		"bellwort flower",
    "rage",
  }
	ak.occie.aura.physicalcures = {
    "piece of kelp",
		"bloodroot leaf",
    "magnesium chip",
    "aurum flake",
  }
  if affstrack.score.addiction &gt; 0 then
    table.insert(ak.occie.aura.physicalcures,"ginseng root")
    table.insert(ak.occie.aura.physicalcures,"ferrum flake")
  else
    table.insert(ak.occie.aura.physicalcures,"ginseng root")
    table.insert(ak.occie.aura.physicalcures,"ferrum flake")
  end
	ak.occie.aura.ignore = {"smole","hawthorn berry","bayberry bark","calamine crystal",}
	if table.contains(ak.occie.aura.ignore, what) then return end
	if table.contains(ak.occie.aura.mentalcures,what) then
		ak.occie.aura.mental = ak.occie.aura.mental - 1
		if ak.occie.aura.mental &lt; 0 then ak.occie.aura.mental = 0 end
	elseif table.contains(ak.occie.aura.physicalcures,what) then
		ak.occie.aura.physical = ak.occie.aura.physical - 1
		if ak.occie.aura.physical &lt; 0 then ak.occie.aura.physical = 0 end
	elseif what == "treed" then
		ak.occie.aura.treed()
	elseif what == "passive" then
		ak.occie.aura.treed()	
	elseif not table.contains(ak.occie.aura.unknownparse,what) then
		table.insert(ak.occie.aura.unknownparse, what)
	end
end

function ak.occie.aura.treed()
		ak.occie.aura.physical = ak.occie.aura.physical - 1
		if ak.occie.aura.physical &lt; 0 then ak.occie.aura.physical = 0 end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Affliction Cured</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.AfflictionCured(affliction, who)
	ak.trackPrios(affliction)
	if affliction == "haemophilia" then
		if ak.bleeding &gt; 200 then
			ak.shaman.GetFashions = true
		end
		affstrack.score.bloodfire = 0
		ak.bleeding = 0
		ak.scoreup(who)
	end
	if ak.AustCuredTrack then
		ak.AustCuredTrack(affliction)
	end
end

	</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Over One Saves</name>
							<packageName></packageName>
							<script>ak.excess = ak.excess or {}
function ak.DumpExcess(affliction)
	local stored = math.floor(affstrack.score[affliction]/100)
	stored = stored * 100
	if stored &gt; 0 then
		ak.excess[affliction] = stored
	end
	affstrack.score[affliction] = affstrack.score[affliction] - stored
end

function ak.RestoreExcess(affliction)
	if ak.excess[affliction] then
		affstrack.score[affliction] = affstrack.score[affliction] + ak.excess[affliction]
	end
end

</script>
							<eventHandlerList />
						</Script>
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Prorities</name>
							<packageName></packageName>
							<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>Priority by Healed</name>
								<packageName></packageName>
								<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
ak.enemyprio = ak.enemyprio or {}
ak.enemyprio.healed = ak.enemyprio.healed or {}
target = target or myDefTarget or "Austere"

ak.tieredaffs = {"rightleg 100","rightleg 200","rightleg 300","leftleg 100","leftleg 200","leftleg 300","rightarm 100","rightarm 200","rightarm 300","leftarm 100","leftarm 200","leftarm 300",
                 "head 100","head 200","head 300","torso 100","torso 200","torso 300"}
local ignored = {"rightleg","leftleg","rightarm","leftarm","torso","head","tempslickness"}


function ak.trackPrios(affliction)
	if not affliction or not table.contains(affstrack.score, affliction) then 
		echo("&lt;cyan&gt;SOMETHING IS PUSHING AN UNKNOWN AFF CURED")
		return 
	end
	ak.enemyprio.healed[target] = ak.enemyprio.healed[target] or {}
	local maxinteger = 0
	local fuck = ak.enemyprio.healed[target]
	local aff = affliction
	if table.contains(ignored, aff) then return end
	if table.contains(fuck, aff) then
		table.remove(fuck,table.index_of(fuck, aff))
	end
	if #fuck &gt; 0 then
		for i = 1, #fuck do
			if affstrack.score[fuck[i]] and affstrack.score[fuck[i]] &gt; 0 then
				if affstrack.score[aff] and not table.contains(fuck, aff) then
					table.insert(fuck, i, aff)
					break
				end
			end
		end
	end
	if affstrack.score[aff] and not table.contains(fuck, aff) then
		table.insert(fuck, aff)
	end
	for k,v in pairs(affstrack.score) do
		if v &gt; 0 and not table.contains(fuck, k) and not table.contains(ignored, k) then
			table.insert(fuck, k)
		end
	end
	if ak.debug then
		cecho("enemyhealedprio")
		display(ak.enemyprio.healed[target])
	end
end



function ak.prioSalve(aff)
	local returner = 0
	if not applycure.affoverone then return returner end
	if table.contains(applycure.affoverone, aff) then
	   returner = returner + 100
	   if table.contains(applycure.affovertwo, aff) then
	      returner = returner + 100
	      if table.contains(applycure.affoverthree, aff) then
	         returner = returner + 100
	         if table.contains(applycure.affoverfour, aff) then
	            returner = returner + 100
	            if table.contains(applycure.affoverfive, aff) then
	               returner = returner + 100
	               if table.contains(applycure.affoversix, aff) then
	                  returner = returner + 100
	               end
	            end
	         end
	      end
	   end 
	end
	return returner
end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Salve Priorities</name>
								<packageName></packageName>
								<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
ak.enemyprio.salve = ak.enemyprio.salve or {}
ak.enemyprio.salve[target] = ak.enemyprio.salve[target] or {}

ak.tieredaffs = {"rightleg 100","rightleg 200","rightleg 300","leftleg 100","leftleg 200","leftleg 300","rightarm 100","rightarm 200","rightarm 300","leftarm 100","leftarm 200","leftarm 300",
                 "head 100","head 200","head 300","torso 100","torso 200","torso 300"}
local ignored = {"rightleg","leftleg","rightarm","leftarm","torso","head"}
local salvelocations = {"head","legs","arms","torso"}

function ak.enemyprio.applied(salve)
	if not table.contains(salvelocations,salve) then 
		return 
	end
	ak.enemyprio.salve[target] = ak.enemyprio.salve[target] or {}
	local maxinteger = 0
	local compsplit = ""
	local fuck = ak.enemyprio.salve[target]
	local aff = {}
	local insertpoint = false
	if #fuck &gt; 0 then
		for i = 1, #affstrack.applied[salve] do
			if affstrack.score[affstrack.applied[salve][i]] &gt; 0 then
				aff[affstrack.applied[salve][i]] = affstrack.score[affstrack.applied[salve][i]]
			end
		end
	end
	for k,v in pairs(aff) do
		if table.contains(fuck, k.." "..v) then
			table.remove(fuck,table.index_of(fuck, k.." "..v))
		end
	end
	if #fuck &gt; 0 then
		for i = 1, #fuck do
			compsplit = string.split(fuck[i], " ")
			if affstrack.score[compsplit[1]] == (compsplit[2] + 0) then
				if insertpoint then
					for k,v in pairs(aff) do
						if not table.contains(fuck, k.." "..v) then
							table.insert(fuck, insertpoint, k.." "..v)
						end
					end				
				else
					for k,v in pairs(aff) do
						if not table.contains(fuck, k.." "..v) then
							table.insert(fuck, i, k.." "..v)
						end
					end
				end
				insertpoint = false
			else--if ak.enemyprio.notHigherAff(compsplit[1], k) --donothaft hisaffliction
				insertpoint = i
			end
		end
	end
	for k,v in pairs(aff) do
		if not table.contains(fuck, k.." "..v) then
			table.insert(fuck, k.." "..v)
		end
	end	
	for k,v in pairs(affstrack.applied) do --add to table
		if table.contains(salvelocations, k) then
			for i = 1, #v do
				if affstrack.score[v[i]] &gt; 0 and not table.contains(fuck, v[i].." "..affstrack.score[v[i]]) then
					table.insert(fuck, v[i].." "..affstrack.score[v[i]])
				else--already in the table but in the wrong spot / has a score currently
	
				end	
			end
		end
	end
	if ak.debug then
		cecho("enemysalveprio")
		display(fuck)
	end
end

function ak.enemyprio.notHigherAff(aff, aff2)
	local compslit = ""
	local compslit2 = ""
	compsplit = string.split(aff, " ")
	compsplit2 = string.split(aff2, " ")
	if compsplit[1] == compslit[2] then
		return false
	else
		return true
	end


end

</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>BackTracking</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Opponent Priority Table</name>
							<packageName></packageName>
							<script>--backtrack define
-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
function ak.AddedAffReset(affliction)
   if ocured then
      for k,v in pairs(ocured) do
         --display(ocured[k]) 
         if table.contains(ocured[k], affliction) then
            ocured[k] = nil
         end   
      end
   end
end

function ak.ResetConfirmAff(affliction)
   if ocured then
      for k,v in pairs(ocured) do
				 if type(v) == "table" and v[affliction] then
            v[affliction] = nil  
				 end 
      end
   end
end

ocured = ocured or {
   parseout = {},
   conversion = {
       ["aurum flake"]      = "kelp",
       ["piece of kelp"]    = "kelp",
       ["lobelia seed"]     = "lobelia",
       ["argentum flake"]   = "lobelia",
       ["prickly ash bark"] = "ash",
       ["stannum flake"]    = "ash",
       ["bellwort flower"]  = "bellwort",
       ["cuprum flake"]     = "bellwort",
       ["goldenseal root"]  = "goldenseal",
       ["plumbum flake"]    = "goldenseal",
       ["bloodroot leaf"]   = "bloodroot",
       ["magnesium chip"]   = "bloodroot",
       ["ginseng root"]     = "ginseng",
       ["ferrum flake"]     = "ginseng",
       ["rage"]             = "rage",
       ["hawthorn berry"]   = "hawthorn",
       ["calamine crystal"] = "hawthorn",
       ["bayberry bark"]    = "bayberry",
       ["arsenic pellet"]   = "bayberry"
   },
   curemethods = {
   "treed",
   "focused",
   "restored",
   "smoked",
   "cureall",
   "applied",
   } 
}

function ak.resetbacktrack()
ocured = {
   conversion = {
       ["aurum flake"]      = "kelp",
       ["piece of kelp"]    = "kelp",
       ["lobelia seed"]     = "lobelia",
       ["argentum flake"]   = "lobelia",
       ["prickly ash bark"] = "ash",
       ["stannum flake"]    = "ash",
       ["bellwort flower"]  = "bellwort",
       ["cuprum flake"]     = "bellwort",
       ["goldenseal root"]  = "goldenseal",
       ["plumbum flake"]    = "goldenseal",
       ["bloodroot leaf"]   = "bloodroot",
       ["magnesium chip"]   = "bloodroot",
       ["ginseng root"]     = "ginseng",
       ["ferrum flake"]     = "ginseng",
       ["rage"]             = "rage",
       ["hawthorn berry"]    = "hawthorn",
       ["calamine crystal"] = "hawthorn",
       ["bayberry bark"]    = "bayberry",
       ["arsenic pellet"]   = "bayberry"
   },
   curemethods = {
   "treed",
   "focused",
   "restored",
   "smoked",
   "cureall",
   "applied",
   } 
}
end

</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Pro Tracking Base</name>
							<packageName></packageName>
							<script>ak.ProTrackingConfirmed = ak.ProTrackingConfirmed or function(affliction) 
  affstrack.score[affliction] = 100
  ak.scoreup(target)
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>Expert Diagnosing</name>
						<packageName></packageName>
						<script>
function ak.expertRun()
   possiblechecksAK = {}
   vcombo = vcombo or {}
   currentlydiagnosingak = nil
   for k,v in pairs(affstrack.score) do
      if (v &gt; 1 and AkcheckPrioList[k] and AkcheckPrioList[k] ~= 0) and (not table.contains(affstrack.venoms, k) or not table.contains(vcombo, affstrack.venoms[k])) then
         local mathed = v
         if mathed &lt; 50 then
            mathed =  50-((mathed - 50) * -1)
         else
            mathed = 50-(mathed - 50)
         end
         if (mathed + AkcheckPrioList[k]) &gt; 100 then
            possiblechecksAK[k] = (mathed + AkcheckPrioList[k])
         end
         mathed = nil
      end
   end
   ak.ExpertPickanAff()
end

function ak.ExpertPickanAff()
   for k,v in pairs(possiblechecksAK) do
      if currentlydiagnosingak == nil then
         currentlydiagnosingak = k
      end 
      if v &gt; possiblechecksAK[currentlydiagnosingak] then
         currentlydiagnosingak = k
      end
   end
   if currentlydiagnosingak then
      currentlydiagnosingak = "check "..target.." for "..currentlydiagnosingak 
   else
      currentlydiagnosingak = ""
   end
   if not ak.diagnosingoffbal and currentlydiagnosingak ~= "" then
      send(currentlydiagnosingak)
   end
end
AkcheckPrioList = {
                ["addiction"]      = 0,
                ["aeon"]           = 100,
                ["agoraphobia"]    = 0,
                ["anorexia"]       = 0,
                ["aflame"]         = 0,
                ["airfist"]        = 0,
                ["asthma"]         = 0,
                ["blind"]          = 0,
                ["blackout"]       = 0,
                ["bound"]          = 0,
                ["claustrophobia"] = 0,
                ["clumsiness"]     = 50,
                ["confusion"]      = 0,
                ["crippledarm"]    = 0,
                ["crippledleg"]    = 0,
                ["darkshade"]      = 50,
                ["deadening"]      = 0,
                ["deaf"]           = 0,
                ["dementia"]       = 0,
                ["disloyalty"]     = 0,
                ["disrupt"]        = 0,
                ["dizziness"]      = 0,
                ["epilepsy"]       = 0,
                ["frozen"]         = 0,
                ["generosity"]     = 0,
                ["haemophilia"]    = 100,
                ["hallucinations"] = 0,
                ["hamstring"]      = 0,
                ["healthleech"]    = 0,
                ["hellsight"]      = 0,
                ["hypersomnia"]    = 0,
                ["hypochondria"]   = 100,
                ["impaleslash"]    = 0,
                ["impatience"]     = 100,
                ["insomnia"]       = 0,
                ["kola"]           = 0,
                ["lethargy"]       = 0,
                ["loneliness"]     = 0,
                ["masochism"]      = 0,
                ["manaleech"]      = 0,
                ["nausea"]         = 0,
                ["pacifism"]       = 0,
                ["paralysis"]      = 100,
                ["paranoia"]       = 0,
                ["prone"]          = 0,
                ["recklessness"]   = 0,
                ["scytherus"]      = 100,
                ["selarnia"]       = 0,
                ["sensitivity"]    = 75,
                ["shyness"]        = 0,
                ["slickness"]      = 100,
                ["sleep"]          = 0,
                ["stupidity"]      = 0,
                ["transfixed"]     = 0,
                ["timeflux"]       = 0,
                ["weariness"]      = 75,
                ["whisperingmadness"] = 0,
                ["vertigo"]        = 0,
                ["vitiate"]        = 0,
                ["voidfist"]       = 0,
                ["voyria"]         = 0,
                ["rightleg"]       = 0,
                ["leftleg"]        = 0,
                ["rightarm"]       = 0,
                ["leftarm"]        = 0,
                ["head"]           = 0,
                ["torso"]          = 0,
}</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Misc</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Version ID</name>
							<packageName></packageName>
							<script>ak.version = 7.8</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>gmcp_items_api</name>
				<packageName>gmcp_items_api</packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>api.gmcp_room</name>
					<packageName></packageName>
					<script>api = api or {}
function api.gmcp_room(e)
  if gmcp.Room ~= nil then
    if e ~= "gmcp.Room.Info" then return end
    local r = gmcp.Room.Info
    api.room = api.room or {}
    api.room.num = r.num
    api.room.environment = r.environment
    api.room.name = r.name
    raiseEvent("api room update")
  end
end</script>
					<eventHandlerList>
						<string>gmcp.Room.Info</string>
					</eventHandlerList>
					<Script isActive="yes" isFolder="no">
						<name>api.gmcp_room_inventory</name>
						<packageName></packageName>
						<script>function api.gmcp_room_inventory(e)
  if not e:find("gmcp.Char.Items", 1, true) then return end
  local operation = e:match("(%a+)$")
  if gmcp.Char.Items[operation].location ~= "room" then return end
  api.room = api.room or {}
  api.room.items = api.room.items or {}
  api.room.mobs = api.room.mobs or {}
  
  if e:find("List") then
    local items = gmcp.Char.Items.List.items
    api.room.items = {}
    api.room.mobs = {}
    for _, item in ipairs(items) do
        if string.find(item.attrib or '', "m") then
          api.room.mobs[item.id] = {name = item.name, attributes = item.attrib or nil}
        else
          api.room.items[item.id] = {name = item.name, attributes = item.attrib or nil}
        end
    end
    raiseEvent("api room items list", api.room.items)
    raiseEvent("api room mobs list", api.room.mobs)
  elseif e:find("Add") then
    local item = gmcp.Char.Items.Add.item
    --if api.room.mobs[item.id] or api.room.items[item.id] then error("api.gmcp_room_inventory: attempt to add item ("..item.id.."), but it already exists") end
    if string.find(item.attrib or '', 'm') then
      api.room.mobs[item.id] = {name = item.name, attributes = item.attrib or nil}
      raiseEvent("api room mob add", item.id, item.name, item.attrib)
    else
      api.room.items[item.id] = {name = item.name, attributes = item.attrib or nil}
      raiseEvent("api room item add", item.id, item.name, item.attrib)
    end
  elseif e:find("Remove") then
    local item = gmcp.Char.Items.Remove.item
    --if (not api.room.mobs[item.id]) and (not api.room.items[item.id]) then error("api.gmcp_room_inventory: attempt to remove item ("..item.id.."), but it doesn't exist") end
    if string.find(item.attrib or '', 'm') then
      api.room.mobs[item.id] = nil
      raiseEvent("api room mob remove", item.id, item.name)
    else
      api.room.items[item.id] = nil
      raiseEvent("api room item remove", item.id, item.name)
    end
  end
  raiseEvent("api room items update", api.room.items)
  raiseEvent("api room mobs update", api.room.mobs)
  raiseEvent("api room update")
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Items.List</string>
							<string>gmcp.Char.Items.Add</string>
							<string>gmcp.Char.Items.Remove</string>
						</eventHandlerList>
					</Script>
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Mesmer</name>
				<packageName>Mesmer</packageName>
				<script></script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Mesmer</name>
					<packageName></packageName>
					<script>mesmer = mesmer or {}
mesmer.myVersion = "1.0"
mesmer.implanted = mesmer.implanted or {}
mesmer.status = mesmer.status or "none"
mesmer.ref = mesmer.ref or {}

-- mesmer uses the variable target for the person your trying to hypnotise, if you 
-- use something different change it to target = &lt;your variable&gt; for the mesmer to work.
target = target or "none"  

-- this allows for the quick setup of affliction sets, I have included a sample so you can
-- see how it works. Typing 'sugg c1' will add impatience, confusion, and disruption to the 
-- queue. They will fire in that order once snapped.
mesmer.ref.set = 
  {
    ["c1"] = {"impatience", "confusion", "disrupt"},
  }
  
-- this is for display purposes, just give a name to any set and it will show you that
-- once you queue it.
mesmer.ref.setName = 
  {
    ["c1"] = "simple",
  }

mesmer.echo =
  function(str)
    cecho("\n&lt;dim_grey&gt;\[&lt;red&gt;mesmer&lt;dim_grey&gt;\]: &lt;light_pink&gt;" .. str .. "\n")
  end
  
mesmer.echon =
  function(str)
    cecho("\n&lt;dim_grey&gt;\[&lt;red&gt;mesmer&lt;dim_grey&gt;\]: &lt;light_pink&gt;" .. str)
  end
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Read Me</name>
						<packageName></packageName>
						<script>--[[

Mesmer is a queuing system to handle your hypnosis needs. Once the queue has been set 
it doesn't need to be set again, unless you desire to change what's in it.

just type 'mesmer' and it will give you a rundown the available commands.

-------------------------------------\
API:
-------------------------------------/

mesmer.suggest()      - this is perfect for key binding, this complete the next step in the hypno
                        process: hypnotise &gt; suggest &gt; seal &gt; snap
  
mesmer.resetQueue()   - this reset the queue so that the next round of afflictions can be queued.

mesmer.resetTarget()  - this resets the target data, doesn't touch the queue. This would be good 
                        to queue on target death. Some instances already included in triggers.
mesmer.reset()        - this is a hard reset (resets everything). This should only be done if 
                        something goes wrong with the queue.

-------------------------------------\
VARIABLES:
-------------------------------------/

mesmer.sealTime       - how long do you want the seal time to be. This should be manually set in
                        the script, or you can make an alias for it.
                        
mesmer.countdown      - how long until you lose the control over your targets mind

mesmer.status         - which phase of hypnosis are you on (hypnotised, in progress, sealed, snapped

]]</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Table Referneces</name>
						<packageName></packageName>
						<script>mesmer.ref.affs =
  {
    "agoraphobia",  "amnesia",    "loneliness",   "masochism",   "vertigo",          
    "recklessness", "clumsiness", "hypochondria", "addiction",   "lethargy",     
    "generosity",   "pacifism",   "confusion",    "dementia",    "hallucinations",
    "hypersomnia",  "paranoia",   "stupidity",    "impatience",  "epilepsy",         
    "stuttering",   "anorexia",   "deadening",    "disrupted",   "claustrophobia",
  }
mesmer.ref.vis =
  {
    "agoraphobia",  "amnesia",    "impatience",   "disrupted",   "claustrophobia",
    "stupidity",    "loneliness", "clumsiness",   "pacifism",    "confusion",
    "dementia",     "paranoia",   "hypersomnia",
  }
-- these are the shorts that you will enter to put affliction into the queue 
mesmer.ref.shorts =
  {
    imp = "impatience",   clu = "clumsiness",   cla = "claustrophobia",
    amn = "amnesia",      add = "addiction",    par = "paranoia",
    lon = "loneliness",   stt = "stuttering",   hal = "hallucinations",
    pac = "pacifism",     hpr = "hypersomnia",  dem = "dementia",
    dea = "deadening",    epi = "epilepsy",     ago = "agoraphobia",
    mas = "masochism",    ver = "vertigo",      rec = "recklessness",
    let = "lethargy",     ano = "anorexia",     dis = "disrupt",
    con = "confusion",    stu = "stupidity",    gen = "generosity",
    hyp = "hypochondria",
  }
mesmer.ref.shortsRev =
  {
    impatience = "imp",   clumsiness = "clu",   claustrophobia = "cla",
    amnesia = "amn",      addiction = "add",    paranoia = "par",
    loneliness = "lon",   stuttering = "stt",   hallucinations = "hal",
    pacifism = "pac",     hypersomnia = "hpr",  dementia = "dem",
    deadening = "dea",    epilepsy = "epi",     agoraphobia = "ago",
    masochism = "mas",    recklessness = "rec", vertigo = "ver",
    lethargy = "let",     anorexia = "ano",     disrupt = "dis",
    confusion = "con",    stupidity = "stu",    generosity = "gen",
    hypochondria = "hyp",
  }</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Core Functions</name>
						<packageName></packageName>
						<script>-- taken from SVO

boxDisplay =
  function(msg, color, lower)
    deselect()
    local colTbl = {}
    if color then
      colTbl = string.split(color, ":")
      for k = 1, 2 do
        if colTbl[k] == "" then
          colTbl[k] = nil
        end
      end
      if colTbl[2] then
        bg(colTbl[2])
      end
    end
    colTbl[1] = colTbl[1] or "red"
    fg(colTbl[1])
    local leng = ((2 * string.len(msg)) + 11)
    local mes = msg
    if not lower then
      mes = string.upper(msg)
    end
    echo("\n ")
    echo(string.rep("-", leng + 2))
    echo(" \n|     " .. mes .. " | " .. mes .. "     |\n ")
    echo(string.rep("-", leng + 2))
    echo(" \n")
    resetFormat()
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Internals</name>
						<packageName></packageName>
						<script>mesmer.suggest =
  function()
    if table.contains({"none", "snapped"}, mesmer.status) then
      send("hypnotise " .. target, false)
      send("hypnotic imprint "..target, false)
    elseif (mesmer.suggSum &gt; mesmer.implantSum and mesmer.status == "hypnotised") then
      send("suggest " .. target .. " " .. mesmer.suggQueue[(mesmer.implantSum + 1)], false)
    elseif (mesmer.suggSum == mesmer.implantSum and mesmer.status == "hypnotised") then
      send("seal " .. target .. " " .. mesmer.sealTime, false)
    elseif mesmer.status == "sealed" then
      --send("snap "..target, false)
    end
  end
  
mesmer.push =
  function()
    mesmer.startTimer()
    mesmer.implantSum = mesmer.implantSum + 1
    if mesmer.suggQueue[mesmer.implantSum] == "disrupt" then
      table.insert(mesmer.implanted, 1, "disrupted")
    else
      table.insert(mesmer.implanted, 1, mesmer.suggQueue[mesmer.implantSum])
    end
    boxDisplay(mesmer.implanted[1] .. " IMPLANTED!", "white:black")
  end
  
 --svo.doaddfree("hypnotic imprint "..target)</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Queue</name>
						<packageName></packageName>
						<script>mesmer.queue =
  function(reset, action)
    if reset == nil then
      mesmer.resetQueue(true)
      return
    elseif reset == "action" then
      if action == nil then
        mesmer.reset()
        return
      end
      mesmer.suggSum = mesmer.suggSum + 1
      table.insert(mesmer.suggQueue, 1, "action " .. action)
      return
    end
    local wrong = {}
    local print = {}
    mesmer.echon("adding to queue: ")
    for i = 2, #matches do
      if table.contains(mesmer.ref.set, matches[i]) then
        for _, aff in ipairs(mesmer.ref.set[matches[i]]) do
          if not table.contains(mesmer.suggQueue, aff) then
            mesmer.suggSum = mesmer.suggSum + 1
            table.insert(mesmer.suggQueue, 1, aff)
          end
        end
        table.insert(print, mesmer.ref.setName[matches[i]])
      elseif table.contains(mesmer.ref.shorts, matches[i]) then
        if not table.contains(mesmer.suggQueue, mesmer.ref.shorts[matches[i]]) then
          mesmer.suggSum = mesmer.suggSum + 1
          table.insert(mesmer.suggQueue, 1, mesmer.ref.shorts[matches[i]])
          table.insert(print, mesmer.ref.shorts[matches[i]])
        end
      else
        table.insert(wrong, 1, matches[i])
      end
    end
    if next(print) then
      cecho("&lt;dim_grey&gt;(&lt;white&gt;" .. table.concat(print, "&lt;dim_grey&gt;, &lt;white&gt;") .. "&lt;dim_grey&gt;)")
    end
    if next(wrong) then
      cecho("&lt;red&gt;[&lt;white&gt;" .. table.concat(wrong, " ") .. "&lt;red&gt;]")
    end
    if next(mesmer.suggQueue) then
      mesmer.echon("   &lt;white&gt;: &lt;light_pink&gt;queued&lt;dim_grey&gt;: ")
      cecho(" &lt;dim_grey&gt;( &lt;grey&gt;")
      for _, aff in pairs(mesmer.suggQueue) do
        if table.contains(mesmer.ref.shortsRev, aff) then
          if table.size(mesmer.suggQueue) == _ then
            cecho(mesmer.ref.shortsRev[aff] .. " ")
          else
            cecho(mesmer.ref.shortsRev[aff] .. "&lt;dim_gray&gt;,&lt;gray&gt; ")
          end
        else
          cecho(aff .. " ")
        end
      end
      cecho("&lt;dim_grey&gt;) &lt;&lt;")
    else
      mesmer.echo("   &lt;white&gt;: &lt;light_pink&gt;suggestions queued &lt;white&gt;: &lt;grey&gt;empty")
    end
  end

mesmer.resetQueue =
  function(echo)
    mesmer.suggQueue = {}
    mesmer.suggSum = 0
    if echo then
      --mesmer.echo("reset hypnosis suggestion queue")
    end
  end
  
mesmer.resetTarget =
  function()
    mesmer.implanted = {}
    mesmer.implantSum = 0
    mesmer.status = "none"
    mesmer.stopTimer()
    --mesmer.echo("reset hypnosis target data")
  end
  
mesmer.reset =
  function()
    mesmer.implanted = {}
    mesmer.implantSum = 0
    mesmer.sealTime = mesmer.sealTime or 1
    mesmer.countdown = 0
    mesmer.status = "none"
    mesmer.resetQueue(false)
    --mesmer.echo("reset hypnosis data")
  end
  
 mesmer.reset()</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Timer Functions</name>
						<packageName></packageName>
						<script>mesmer.startTimer =
  function()
    mesmer.countdown = 20
    enableTimer("Hypnosis Timer")
  end
  
mesmer.stopTimer =
  function()
    mesmer.countdown = 0
    disableTimer("Hypnosis Timer")
  end
</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
